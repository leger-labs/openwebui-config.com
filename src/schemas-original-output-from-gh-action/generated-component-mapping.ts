/**
 * Generated Component Mappings for OpenWebUI Configuration Forms
 * DO NOT EDIT DIRECTLY - Changes will be overwritten
 *
 * This file contains the complete component mapping registry generated by applying
 * declarative design rules to field characteristics from the OpenAPI schema and uiSchema.
 *
 * The component mappings define which React components should be used for each
 * configuration field, along with their props, wrappers, and alternatives.
 *
 * Generated at: 2025-05-25T09:27:24.637Z
 * Total fields processed: 370
 *
 * Component Assignment Statistics:
 * - Rule-based assignments: 370
 * - Explicit overrides: 31
 * - Pattern matches: 128
 * - uiSchema suggestions: 0
 * - Type defaults: 197
 * - Fallbacks: 0
 *
 * Components used: url-input, toggle-field, text-field, array-field, select-field, secret-field, markdown-text-area
 *
 * Architecture Notes:
 * - Component selection follows declarative design rules rather than algorithmic inference
 * - Explicit field overrides take precedence over pattern rules and type defaults
 * - Component props are derived from field constraints and validation rules
 * - Wrapper components add functionality like conditional visibility and premium features
 * - Alternative components are provided for progressive enhancement and A/B testing
 *
 * Usage:
 * import { getComponentForField, getComponentProps, componentMappings } from './generated-component-mapping';
 *
 * const component = getComponentForField('OPENAI_API_KEY'); // 'secret-field'
 * const props = getComponentProps('OPENAI_API_KEY'); // { type: 'password', autoComplete: 'new-password' }
 */

// Core type definitions for component mappings

/**
 * Represents a complete component mapping for a single field
 */
export interface ComponentMapping {
  /** Primary component to use for this field */
  component: string;

  /** Props to pass to the component */
  props: Record<string, any>;

  /** Wrapper components that should wrap this field */
  wrappers: string[];

  /** Alternative components that could be used instead */
  alternatives: string[];

  /** Decision path showing how this component was selected */
  decisionPath: string[];

  /** Human-readable reason for this component choice */
  decisionReason: string;
}

/**
 * Component props specific to different field types
 */
export interface ComponentProps {
  /** Basic HTML input props */
  type?: string;
  placeholder?: string;
  autoComplete?: string;

  /** Validation constraints */
  minLength?: number;
  maxLength?: number;
  min?: number;
  max?: number;
  pattern?: string;

  /** Select field options */
  options?: Array<{ value: any; label: string }>;

  /** Rich text editor props */
  rows?: number;

  /** Field metadata */
  description?: string;
  conditional?: boolean;
}

/**
 * Available shadcn form components
 */
export type AvailableComponent =
  | 'text-field'
  | 'secret-field'
  | 'select-field'
  | 'toggle-field'
  | 'url-input'
  | 'array-field'
  | 'markdown-text-area';

/**
 * Available wrapper components
 */
export type AvailableWrapper =
  | 'conditional-field'
  | 'overrideable-field'
  | 'plan-restricted-feature';

/**
 * Component registry mapping field names to their component configurations
 */
export type ComponentRegistry = Record<string, ComponentMapping>;

/**
 * Integration metadata for framework compatibility
 */
export interface IntegrationMetadata {
  /** react-ts-form compatibility information */
  reactTsForm: {
    compatible: boolean;
    totalFields: number;
    mappedFields: number;
    conditionalFields: number;
  };

  /** Component library information */
  componentLibrary: {
    name: string;
    components: string[];
    wrappers: string[];
  };

  /** Generation statistics */
  statistics: {
    totalFields: number;
    componentTypes: number;
    ruleBasedAssignments: number;
    coverage: number;
  };
}

/**
 * Main export interface combining all component mapping data
 */
export interface OpenWebUIComponentMappings {
  /** Component mappings for all fields */
  mappings: ComponentRegistry;

  /** Component props organized by field */
  props: Record<string, ComponentProps>;

  /** Wrapper requirements organized by field */
  wrappers: Record<string, string[]>;

  /** Integration metadata */
  integration: IntegrationMetadata;

  /** Generation metadata */
  metadata: {
    generatedAt: string;
    totalFields: number;
    version: string;
  };
}

// Component Mapping Registry - Maps each field to its component configuration
const componentMappingsPart1: Record<string, ComponentMapping> = {
  ADMIN_EMAIL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the admin email shown by `SHOW_ADMIN_DETAILS`',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AIOHTTP_CLIENT_TIMEOUT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the timeout duration in seconds for the AIOHTTP client. This impacts things',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the timeout in seconds for fetching the model list. This can be useful in cases where network latency requires a longer timeout duration to successfully retrieve the model list.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  AIOHTTP_CLIENT_TIMEOUT_OPENAI_MODEL_LIST: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the timeout in seconds for fetching the model list. This can be useful in cases where network latency requires a longer timeout duration to successfully retrieve the model list.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  API_KEY_ALLOWED_ENDPOINTS: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description:
        'Specifies a comma-separated list of allowed API endpoints when API key endpoint restrictions are enabled.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_KEY* → secret-field'],
    decisionReason: 'pattern-rule: *_KEY* → secret-field',
  },
  AUDIO_STT_AZURE_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the Azure API key to use for Speech-to-Text.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  AUDIO_STT_AZURE_LOCALES: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the locales to use for Azure Speech-to-Text.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUDIO_STT_AZURE_REGION: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the Azure region to use for Speech-to-Text.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUDIO_STT_ENGINE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'openai',
          label: 'Openai',
        },
        {
          value: 'deepgram',
          label: 'Deepgram',
        },
      ],
      description:
        'Specifies the Speech-to-Text engine to use.\n\nOptions:\n  - `openai` - Uses OpenAI engine for Speech-to-Text.\n  - `deepgram` - Uses Deepgram engine for Speech-to-Text.\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['explicit-override: select-field'],
    decisionReason: 'explicit-override: select-field',
  },
  AUDIO_STT_MODEL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the Speech-to-Text model to use for OpenAI-compatible endpoints.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUDIO_STT_OPENAI_API_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the OpenAI-compatible base URL to use for Speech-to-Text.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  AUDIO_STT_OPENAI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the OpenAI API key to use for Speech-to-Text.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  AUDIO_TTS_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Text-to-Speech.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the output format for Azure Text to Speech.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUDIO_TTS_AZURE_SPEECH_REGION: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the region for Azure Text to Speech.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUDIO_TTS_ENGINE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'azure',
          label: 'Azure',
        },
        {
          value: 'elevenlabs',
          label: 'Elevenlabs',
        },
        {
          value: 'openai',
          label: 'Openai',
        },
        {
          value: 'transformers',
          label: 'Transformers',
        },
      ],
      description:
        'Specifies the Text-to-Speech engine to use.\n\nOptions:\n  - `azure` - Uses Azure engine for Text-to-Speech.\n  - `elevenlabs` - Uses ElevenLabs engine for Text-to-Speech\n  - `openai` - Uses OpenAI engine for Text-to-Speech.\n  - `transformers` - Uses SentenceTransformers for Text-to-Speech.\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['explicit-override: select-field'],
    decisionReason: 'explicit-override: select-field',
  },
  AUDIO_TTS_MODEL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the OpenAI text-to-speech model to use.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUDIO_TTS_OPENAI_API_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the OpenAI-compatible base URL to use for text-to-speech.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  AUDIO_TTS_OPENAI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key to use for text-to-speech.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  AUDIO_TTS_SPLIT_ON: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the OpenAI text-to-speech split on to use.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUDIO_TTS_VOICE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the OpenAI text-to-speech voice to use.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the maximum input length for autocomplete generation.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Sets the prompt template for autocomplete generation.',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['explicit-override: markdown-text-area'],
    decisionReason: 'explicit-override: markdown-text-area',
  },
  AUTOMATIC1111_API_AUTH: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the AUTOMATIC1111 API authentication.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUTOMATIC1111_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: "Specifies the URL to AUTOMATIC1111's Stable Diffusion API.",
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  AUTOMATIC1111_CFG_SCALE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the scale for AUTOMATIC1111 inference.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: number → text-field'],
    decisionReason: 'type-default: number → text-field',
  },
  AUTOMATIC1111_SAMPLER: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the sampler for AUTOMATIC1111 inference.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AUTOMATIC1111_SCHEDULER: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the scheduler for AUTOMATIC1111 inference.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AZURE_STORAGE_CONTAINER_NAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the container name for Azure Storage.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  AZURE_STORAGE_ENDPOINT: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the endpoint URL for Azure Storage.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_ENDPOINT* → url-input'],
    decisionReason: 'pattern-rule: *_ENDPOINT* → url-input',
  },
  AZURE_STORAGE_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Set the access key for Azure Storage.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_KEY* → secret-field'],
    decisionReason: 'pattern-rule: *_KEY* → secret-field',
  },
  BING_SEARCH_V7_ENDPOINT: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the endpoint for Bing Search API.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_ENDPOINT* → url-input'],
    decisionReason: 'pattern-rule: *_ENDPOINT* → url-input',
  },
  BING_SEARCH_V7_SUBSCRIPTION_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the subscription key for Bing Search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_KEY* → secret-field'],
    decisionReason: 'pattern-rule: *_KEY* → secret-field',
  },
  BOCHA_SEARCH_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Bocha Search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  BRAVE_SEARCH_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for the Brave Search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  BYPASS_EMBEDDING_AND_RETRIEVAL: {
    component: 'toggle-field',
    props: {
      description: 'Bypasses the embedding and retrieval process.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  BYPASS_MODEL_ACCESS_CONTROL: {
    component: 'toggle-field',
    props: {
      description: 'Bypasses model access control.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL: {
    component: 'toggle-field',
    props: {
      description: 'Bypasses the web search embedding and retrieval process.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  CHROMA_CLIENT_AUTH_CREDENTIALS: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies auth credentials for remote ChromaDB Server.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['validation-influence: sensitive-field → secret-field'],
    decisionReason: 'validation-influence: sensitive-field → secret-field',
  },
  CHROMA_CLIENT_AUTH_PROVIDER: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies an authentication provider for remote ChromaDB Server.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CHROMA_DATABASE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the database in the ChromaDB tenant to use for RAG embeddings.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CHROMA_HTTP_HEADERS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'A comma-separated list of HTTP headers to include with every ChromaDB request.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CHROMA_HTTP_HOST: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the hostname of a remote ChromaDB Server. Uses a local ChromaDB instance if not set.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CHROMA_HTTP_PORT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the port of a remote ChromaDB Server.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_PORT → text-field'],
    decisionReason: 'pattern-rule: *_PORT → text-field',
  },
  CHROMA_HTTP_SSL: {
    component: 'toggle-field',
    props: {
      description: 'Controls whether or not SSL is used for ChromaDB Server connections.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  CHROMA_TENANT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the tenant for ChromaDB to use for RAG embeddings.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CHUNK_OVERLAP: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies how much overlap there should be between chunks.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  CHUNK_SIZE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the document chunk size for embeddings.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  CODE_EXECUTION_ENGINE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'jupyter',
          label: 'Jupyter',
        },
        {
          value: 'pyodide',
          label: 'Pyodide',
        },
      ],
      description: 'Specifies the code execution engine to use.',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  CODE_EXECUTION_JUPYTER_AUTH: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the Jupyter authentication method to use for code execution.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
} as const;

const componentMappingsPart2: Record<string, ComponentMapping> = {
  CODE_EXECUTION_JUPYTER_AUTH_PASSWORD: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the Jupyter authentication password to use for code execution.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_PASSWORD → secret-field'],
    decisionReason: 'pattern-rule: *_PASSWORD → secret-field',
  },
  CODE_EXECUTION_JUPYTER_AUTH_TOKEN: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the Jupyter authentication token to use for code execution.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_TOKEN* → secret-field'],
    decisionReason: 'pattern-rule: *_TOKEN* → secret-field',
  },
  CODE_EXECUTION_JUPYTER_TIMEOUT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the timeout for Jupyter code execution.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CODE_EXECUTION_JUPYTER_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Specifies the Jupyter URL to use for code execution.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  CODE_INTERPRETER_ENGINE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'jupyter',
          label: 'Jupyter',
        },
        {
          value: 'pyodide',
          label: 'Pyodide',
        },
      ],
      description: 'Specifies the code interpreter engine to use.',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  CODE_INTERPRETER_JUPYTER_AUTH: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the Jupyter authentication method to use for code interpreter.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the Jupyter authentication password to use for code interpreter.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_PASSWORD → secret-field'],
    decisionReason: 'pattern-rule: *_PASSWORD → secret-field',
  },
  CODE_INTERPRETER_JUPYTER_AUTH_TOKEN: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the Jupyter authentication token to use for code interpreter.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_TOKEN* → secret-field'],
    decisionReason: 'pattern-rule: *_TOKEN* → secret-field',
  },
  CODE_INTERPRETER_JUPYTER_TIMEOUT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the timeout for the Jupyter code interpreter.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CODE_INTERPRETER_JUPYTER_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Specifies the Jupyter URL to use for code interpreter.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  CODE_INTERPRETER_PROMPT_TEMPLATE: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Specifies the prompt template to use for code interpreter.',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['explicit-override: markdown-text-area'],
    decisionReason: 'explicit-override: markdown-text-area',
  },
  COMFYUI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for ComfyUI.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  COMFYUI_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Specifies the URL to the ComfyUI image generation API.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  COMFYUI_WORKFLOW: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the ComfyUI workflow.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CONTENT_EXTRACTION_ENGINE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'external',
          label: 'External',
        },
        {
          value: 'tika',
          label: 'Tika',
        },
        {
          value: 'docling',
          label: 'Docling',
        },
        {
          value: 'document_intelligence',
          label: 'Document Intelligence',
        },
        {
          value: 'mistral_ocr',
          label: 'Mistral Ocr',
        },
      ],
      description:
        'Sets the content extraction engine to use for document ingestion.\n\nOptions:\n  - `external` - Use external loader\n  - `tika` - Use a local Apache Tika server\n  - `docling` - Use Docling engine\n  - `document_intelligence` - Use Document Intelligence engine\n  - `mistral_ocr` - Use Mistral OCR engine\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['explicit-override: select-field'],
    decisionReason: 'explicit-override: select-field',
  },
  CORS_ALLOW_ORIGIN: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the allowed origins for Cross-Origin Resource Sharing (CORS).',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  CUSTOM_NAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets `WEBUI_NAME` but polls **api.openwebui.com** for metadata.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  DATABASE_POOL_MAX_OVERFLOW: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the database pool max overflow.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  DATABASE_POOL_RECYCLE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the database pool recycle time in seconds.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  DATABASE_POOL_SIZE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the size of the database pool. A value of `0` disables pooling.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  DATABASE_POOL_TIMEOUT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the database pool timeout in seconds to get a connection.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  DATABASE_SCHEMA: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the database schema to connect to.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  DATABASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Specifies the database URL to connect to.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  DATA_DIR: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the base directory for data storage, including uploads, cache, vector database, etc.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_DIR → text-field'],
    decisionReason: 'pattern-rule: *_DIR → text-field',
  },
  DEEPGRAM_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the Deepgram API key to use for Speech-to-Text.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  DEFAULT_LOCALE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the default locale for the application.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  DEFAULT_MODELS: {
    component: 'array-field',
    props: {
      description: 'Sets a default Language Model.',
    },
    wrappers: [],
    alternatives: ['tags-input', 'multi-select'],
    decisionPath: ['explicit-override: array-field'],
    decisionReason: 'explicit-override: array-field',
  },
  DEFAULT_PROMPT_SUGGESTIONS: {
    component: 'array-field',
    props: {
      description: 'List of prompt suggestions. The format for prompt suggestions are:',
    },
    wrappers: [],
    alternatives: ['tags-input', 'multi-select'],
    decisionPath: ['explicit-override: array-field'],
    decisionReason: 'explicit-override: array-field',
  },
  DEFAULT_USER_ROLE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'pending',
          label: 'Pending',
        },
        {
          value: 'user',
          label: 'User',
        },
        {
          value: 'admin',
          label: 'Admin',
        },
      ],
      description:
        'Sets the default role assigned to new users.\n\nOptions:\n  - `pending` - New users are pending until their accounts are manually activated by an admin.\n  - `user` - New users are automatically activated with regular user permissions.\n  - `admin` - New users are automatically activated with administrator permissions.\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  DOCLING_OCR_ENGINE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the OCR engine used by Docling.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  DOCLING_OCR_LANG: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the OCR language(s) to be used with the configured `DOCLING_OCR_ENGINE`.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  DOCLING_SERVER_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Specifies the URL for the Docling server.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  DOCUMENT_INTELLIGENCE_ENDPOINT: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Specifies the endpoint for document intelligence.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_ENDPOINT* → url-input'],
    decisionReason: 'pattern-rule: *_ENDPOINT* → url-input',
  },
  DOCUMENT_INTELLIGENCE_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the key for document intelligence.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_KEY* → secret-field'],
    decisionReason: 'pattern-rule: *_KEY* → secret-field',
  },
  ELASTICSEARCH_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the Elasticsearch API key.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  ELASTICSEARCH_CA_CERTS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the path to the CA certificates for Elasticsearch.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  ELASTICSEARCH_CLOUD_ID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the Elasticsearch cloud ID.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  ELASTICSEARCH_INDEX_PREFIX: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the prefix for the Elasticsearch index.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  ELASTICSEARCH_PASSWORD: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the password for Elasticsearch.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_PASSWORD → secret-field'],
    decisionReason: 'pattern-rule: *_PASSWORD → secret-field',
  },
  ELASTICSEARCH_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Specifies the URL for the Elasticsearch instance.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  ELASTICSEARCH_USERNAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the username for Elasticsearch.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  ENABLE_ADMIN_CHAT_ACCESS: {
    component: 'toggle-field',
    props: {
      description: 'Enables admin users to access all chats.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_ADMIN_EXPORT: {
    component: 'toggle-field',
    props: {
      description: 'Controls whether admin users can export data.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Enables API key authentication.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  ENABLE_API_KEY_ENDPOINT_RESTRICTIONS: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Enables API key endpoint restrictions for added security and configurability.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_KEY* → secret-field'],
    decisionReason: 'pattern-rule: *_KEY* → secret-field',
  },
  ENABLE_AUTOCOMPLETE_GENERATION: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables autocomplete generation.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_CHANNELS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables channel support.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_CODE_EXECUTION: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables code execution.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_CODE_INTERPRETER: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables code interpreter.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_COMMUNITY_SHARING: {
    component: 'toggle-field',
    props: {
      description: 'Controls whether users are shown the share to community button.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
} as const;

const componentMappingsPart3: Record<string, ComponentMapping> = {
  ENABLE_DIRECT_CONNECTIONS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables direct connections.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_EVALUATION_ARENA_MODELS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables evaluation arena models.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_FORWARD_USER_INFO_HEADERS: {
    component: 'toggle-field',
    props: {
      description:
        'Forwards user information (name, ID, email, and role) as X-headers to OpenAI API and Ollama API.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_GOOGLE_DRIVE_INTEGRATION: {
    component: 'toggle-field',
    props: {
      description:
        'Enables or disables Google Drive integration. If set to true, and `GOOGLE_DRIVE_CLIENT_ID` & `GOOGLE_DRIVE_API_KEY` are both configured, Google Drive will appear as an upload option in the chat UI.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_IMAGE_GENERATION: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables image generation features.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_IMAGE_PROMPT_GENERATION: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables image prompt generation.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_LDAP: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables LDAP authentication.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_LOGIN_FORM: {
    component: 'toggle-field',
    props: {
      description:
        'Toggles email, password, sign-in and "or" (only when `ENABLE_OAUTH_SIGNUP` is set to True) elements.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_MESSAGE_RATING: {
    component: 'toggle-field',
    props: {
      description: 'Enables message rating feature.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_OAUTH_GROUP_MANAGEMENT: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables OAuth group management.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_OAUTH_ROLE_MANAGEMENT: {
    component: 'toggle-field',
    props: {
      description: 'Enables role management for OAuth delegation.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_OAUTH_SIGNUP: {
    component: 'toggle-field',
    props: {
      description:
        'Enables account creation when signing up via OAuth. Distinct from `ENABLE_SIGNUP`.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_OLLAMA_API: {
    component: 'toggle-field',
    props: {
      description: 'Enables the use of Ollama APIs.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_ONEDRIVE_INTEGRATION: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables OneDrive integration.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_OPENAI_API: {
    component: 'toggle-field',
    props: {
      description: 'Enables the use of OpenAI APIs.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_PERSISTENT_CONFIG: {
    component: 'toggle-field',
    props: {
      description:
        'If set to `False`, all `PersistentConfig` variables are treated as regular variables.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_QDRANT_MULTITENANCY_MODE: {
    component: 'toggle-field',
    props: {
      description:
        'Enables multitenancy pattern for Qdrant collections management, which significantly reduces RAM usage and computational overhead by consolidating similar vector data structures. Recommend turn on',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_RAG_HYBRID_SEARCH: {
    component: 'toggle-field',
    props: {
      description:
        'Enables the use of ensemble search with `BM25` + `ChromaDB`, with reranking using',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_RAG_LOCAL_WEB_FETCH: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables local web fetch for RAG.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_REALTIME_CHAT_SAVE: {
    component: 'toggle-field',
    props: {
      description:
        "When enabled, the system saves each chunk of streamed chat data to the database in real time to ensure maximum data persistency. This feature provides robust data recovery and allows accurate session tracking. However, the tradeoff is increased latency, as saving to the database introduces a delay. Disabling this feature can improve performance and reduce delays, but it risks potential data loss in the event of a system failure or crash. Use based on your application's requirements and acceptable tradeoffs.",
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_RETRIEVAL_QUERY_GENERATION: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables retrieval query generation.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_SEARCH_QUERY_GENERATION: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables search query generation.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_SIGNUP: {
    component: 'toggle-field',
    props: {
      description: 'Toggles user account creation.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_TAGS_GENERATION: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables tag generation.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_TITLE_GENERATION: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables chat title generation.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_USER_WEBHOOKS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user webhooks.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_WEBSOCKET_SUPPORT: {
    component: 'toggle-field',
    props: {
      description: 'Enables websocket support in Open WebUI.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_WEB_LOADER_SSL_VERIFICATION: {
    component: 'toggle-field',
    props: {
      description: 'Bypass SSL Verification for RAG on Websites.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENABLE_WEB_SEARCH: {
    component: 'toggle-field',
    props: {
      description: 'Enable web search toggle.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['pattern-rule: ENABLE_* → toggle-field'],
    decisionReason: 'pattern-rule: ENABLE_* → toggle-field',
  },
  ENV: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'dev',
          label: 'Dev',
        },
        {
          value: 'prod',
          label: 'Prod',
        },
      ],
      description:
        'Environment setting.\n\nOptions:\n  - `dev` - Enables the FastAPI API documentation on `/docs`\n  - `prod` - Automatically configures several environment variables\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  EXA_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Exa search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  EXTERNAL_DOCUMENT_LOADER_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for authenticating with the external document loader service.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  EXTERNAL_DOCUMENT_LOADER_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the URL for the external document loader service.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  EXTERNAL_PWA_MANIFEST_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description:
        'When defined as a fully qualified URL (e.g., https://path/to/manifest.webmanifest), requests sent to /manifest.json will use the external manifest file. When not defined, the default manifest.json file will be used.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  FIRECRAWL_API_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the base URL for Firecrawl API.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  FIRECRAWL_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Firecrawl API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  FONTS_DIR: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the directory for fonts.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_DIR → text-field'],
    decisionReason: 'pattern-rule: *_DIR → text-field',
  },
  FRONTEND_BUILD_DIR: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the location of the built frontend files.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_DIR → text-field'],
    decisionReason: 'pattern-rule: *_DIR → text-field',
  },
  GCS_BUCKET_NAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the bucket name for Google Cloud Storage. Bucket must already exist.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  GEMINI_API_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: "Specifies the URL to Gemini's API.",
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  GEMINI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the Gemini API key.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  GITHUB_CLIENT_ID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the client ID for GitHub OAuth.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  GITHUB_CLIENT_REDIRECT_URI: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the redirect URI for GitHub OAuth.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  GITHUB_CLIENT_SCOPE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the scope for GitHub OAuth authentication.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  GITHUB_CLIENT_SECRET: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the client secret for GitHub OAuth.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['explicit-override: secret-field'],
    decisionReason: 'explicit-override: secret-field',
  },
  GOOGLE_APPLICATION_CREDENTIALS_JSON: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Contents of Google Application Credentials JSON file.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['validation-influence: sensitive-field → secret-field'],
    decisionReason: 'validation-influence: sensitive-field → secret-field',
  },
  GOOGLE_CLIENT_ID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the client ID for Google OAuth.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  GOOGLE_CLIENT_SECRET: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the client secret for Google OAuth.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['explicit-override: secret-field'],
    decisionReason: 'explicit-override: secret-field',
  },
  GOOGLE_DRIVE_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Google Drive integration.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  GOOGLE_DRIVE_CLIENT_ID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the client ID for Google Drive (client must be configured with Drive API and Picker API enabled).',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
} as const;

const componentMappingsPart4: Record<string, ComponentMapping> = {
  GOOGLE_OAUTH_SCOPE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the scope for Google OAuth authentication.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  GOOGLE_PSE_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for the Google Programmable Search Engine (PSE) service.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  GOOGLE_PSE_ENGINE_ID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'The engine ID for the Google Programmable Search Engine (PSE) service.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  GOOGLE_REDIRECT_URI: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the redirect URI for Google OAuth.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  IMAGES_GEMINI_API_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: "Specifies the URL to Gemini's image generation API.",
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  IMAGES_GEMINI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the Gemini API key for image generation.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  IMAGES_OPENAI_API_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the OpenAI-compatible base URL to use for DALL-E image generation.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  IMAGES_OPENAI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key to use for DALL-E image generation.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  IMAGE_GENERATION_ENGINE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'openai',
          label: 'Openai',
        },
        {
          value: 'comfyui',
          label: 'Comfyui',
        },
        {
          value: 'automatic1111',
          label: 'Automatic1111',
        },
        {
          value: 'gemini',
          label: 'Gemini',
        },
      ],
      description:
        'Specifies the engine to use for image generation.\n\nOptions:\n  - `openai` - Uses OpenAI DALL-E for image generation.\n  - `comfyui` - Uses ComfyUI engine for image generation.\n  - `automatic1111` - Uses AUTOMATIC1111 engine for image generation.\n  - `gemini` - Uses Gemini for image generation.\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['explicit-override: select-field'],
    decisionReason: 'explicit-override: select-field',
  },
  IMAGE_GENERATION_MODEL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Default model to use for image generation',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Specifies the template to use for generating image prompts.',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['explicit-override: markdown-text-area'],
    decisionReason: 'explicit-override: markdown-text-area',
  },
  IMAGE_SIZE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the default image size to generate.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  IMAGE_STEPS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the default iteration steps for image generation. Used for ComfyUI and AUTOMATIC1111.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  JINA_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Jina.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  JWT_EXPIRES_IN: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the JWT expiration time in seconds. Valid time units: `s`, `m`, `h`, `d`, `w` or `-1` for no expiration.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  K8S_FLAG: {
    component: 'toggle-field',
    props: {
      description:
        'If set, assumes Helm chart deployment and sets [`OLLAMA_BASE_URL`](#ollama_base_url) to `http://ollama-service.open-webui.svc.cluster.local:11434`',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  KAGI_SEARCH_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Kagi Search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  LDAP_APP_DN: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the distinguished name for the LDAP application.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_APP_PASSWORD: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the password for the LDAP application.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_PASSWORD → secret-field'],
    decisionReason: 'pattern-rule: *_PASSWORD → secret-field',
  },
  LDAP_ATTRIBUTE_FOR_MAIL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the attribute to use as mail for LDAP authentication.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_ATTRIBUTE_FOR_USERNAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the attribute to use as a username for LDAP authentication.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_CA_CERT_FILE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the path to the LDAP CA certificate file.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_CIPHERS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the ciphers to use for LDAP connection.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_SEARCH_BASE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the base to search for LDAP authentication.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_SEARCH_FILTER: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets a single filter to use for LDAP search. Alternative to `LDAP_SEARCH_FILTERS`.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_SEARCH_FILTERS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the filter to use for LDAP search.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_SERVER_HOST: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the hostname of the LDAP server.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_SERVER_LABEL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the label of the LDAP server.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  LDAP_SERVER_PORT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the port number of the LDAP server.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_PORT → text-field'],
    decisionReason: 'pattern-rule: *_PORT → text-field',
  },
  LDAP_USE_TLS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables TLS for LDAP connection.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  LDAP_VALIDATE_CERT: {
    component: 'toggle-field',
    props: {
      description: 'Sets whether to validate the LDAP CA certificate.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  LICENSE_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the license key to use (for Enterprise users only).',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_KEY* → secret-field'],
    decisionReason: 'pattern-rule: *_KEY* → secret-field',
  },
  MICROSOFT_CLIENT_ID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the client ID for Microsoft OAuth.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  MICROSOFT_CLIENT_SECRET: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the client secret for Microsoft OAuth.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['explicit-override: secret-field'],
    decisionReason: 'explicit-override: secret-field',
  },
  MICROSOFT_CLIENT_TENANT_ID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the tenant ID for Microsoft OAuth.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  MICROSOFT_OAUTH_SCOPE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the scope for Microsoft OAuth authentication.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  MICROSOFT_REDIRECT_URI: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the redirect URI for Microsoft OAuth.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  MILVUS_DB: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the database to connect to within a Milvus instance.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  MILVUS_HNSW_EFCONSTRUCTION: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the `efConstruction` parameter for the HNSW index type in Milvus. This influences the size of the dynamic list for the nearest neighbors during index construction. Only applicable if `MILVUS_INDEX_TYPE` is `HNSW`.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  MILVUS_HNSW_M: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the `M` parameter for the HNSW index type in Milvus. This influences the number of bi-directional links created for each new element during construction. Only applicable if `MILVUS_INDEX_TYPE` is `HNSW`.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  MILVUS_INDEX_TYPE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'AUTOINDEX',
          label: 'AUTOINDEX',
        },
        {
          value: 'FLAT',
          label: 'FLAT',
        },
        {
          value: 'HNSW',
          label: 'HNSW',
        },
        {
          value: 'IVF_FLAT',
          label: 'IVF FLAT',
        },
      ],
      description:
        'Specifies the index type to use when creating a new collection in Milvus. `AUTOINDEX` is generally recommended for Milvus standalone. `HNSW` may offer better performance but typically requires a clustered Milvus setup.',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  MILVUS_IVF_FLAT_NLIST: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the `nlist` parameter for the IVF_FLAT index type in Milvus. This is the number of cluster units. Only applicable if `MILVUS_INDEX_TYPE` is `IVF_FLAT`.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  MILVUS_METRIC_TYPE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the metric type for vector similarity search in Milvus.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  MILVUS_TOKEN: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies an optional connection token for Milvus.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_TOKEN* → secret-field'],
    decisionReason: 'pattern-rule: *_TOKEN* → secret-field',
  },
  MILVUS_URI: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the URI for connecting to the Milvus vector database. This can point to a local or remote Milvus server based on the deployment configuration.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  MISTRAL_OCR_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Specifies the Mistral OCR API key to use.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  MOJEEK_SEARCH_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Mojeek Search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  OAUTH_ADMIN_ROLES: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the roles that are considered administrators.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_ALLOWED_DOMAINS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the allowed domains for OAuth authentication. (e.g. "example1.com,example2.com").',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_ALLOWED_ROLES: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the roles that are allowed access to the platform.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
} as const;

const componentMappingsPart5: Record<string, ComponentMapping> = {
  OAUTH_CLIENT_ID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the client ID for OIDC.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_CLIENT_SECRET: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the client secret for OIDC.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['explicit-override: secret-field'],
    decisionReason: 'explicit-override: secret-field',
  },
  OAUTH_CODE_CHALLENGE_METHOD: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the code challenge method for OAuth authentication.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_EMAIL_CLAIM: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Set email claim for OpenID.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_GROUP_CLAIM: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the group claim for OAuth authentication.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_MERGE_ACCOUNTS_BY_EMAIL: {
    component: 'toggle-field',
    props: {
      description: 'If enabled, merges OAuth accounts with existing accounts using the same email',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  OAUTH_PICTURE_CLAIM: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Set picture (avatar) claim for OpenID.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_PROVIDER_NAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the name for the OIDC provider.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_ROLES_CLAIM: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the roles claim to look for in the OIDC token.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_SCOPES: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the scope for OIDC authentication. `openid` and `email` are required.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OAUTH_UPDATE_PICTURE_ON_LOGIN: {
    component: 'toggle-field',
    props: {
      description:
        'If enabled, updates the local user profile picture with the OAuth-provided picture on login.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  OAUTH_USERNAME_CLAIM: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Set username claim for OpenID.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OFFLINE_MODE: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables offline mode.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  OLLAMA_BASE_URLS: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Configures load-balanced Ollama backend hosts, separated by `;`. See',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['explicit-override: url-input'],
    decisionReason: 'explicit-override: url-input',
  },
  ONEDRIVE_CLIENT_ID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the client ID for OneDrive integration.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OPENAI_API_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Configures the OpenAI base API URL.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['explicit-override: url-input'],
    decisionReason: 'explicit-override: url-input',
  },
  OPENAI_API_BASE_URLS: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Supports balanced OpenAI base API URLs, semicolon-separated.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_BASE_URL* → url-input'],
    decisionReason: 'pattern-rule: *_BASE_URL* → url-input',
  },
  OPENAI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the OpenAI API key.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['explicit-override: secret-field'],
    decisionReason: 'explicit-override: secret-field',
  },
  OPENAI_API_KEYS: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Supports multiple OpenAI API keys, semicolon-separated.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['explicit-override: secret-field'],
    decisionReason: 'explicit-override: secret-field',
  },
  OPENID_PROVIDER_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Path to the `.well-known/openid-configuration` endpoint',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  OPENID_REDIRECT_URI: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the redirect URI for OIDC',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OPENSEARCH_CERT_VERIFY: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables OpenSearch certificate verification.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  OPENSEARCH_PASSWORD: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the password for OpenSearch.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_PASSWORD → secret-field'],
    decisionReason: 'pattern-rule: *_PASSWORD → secret-field',
  },
  OPENSEARCH_SSL: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables SSL for OpenSearch.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  OPENSEARCH_URI: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the URI for OpenSearch.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  OPENSEARCH_USERNAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the username for OpenSearch.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PDF_EXTRACT_IMAGES: {
    component: 'toggle-field',
    props: {
      description: 'Extracts images from PDFs using OCR when loading documents.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  PENDING_USER_OVERLAY_CONTENT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets a custom text content for the pending user overlay.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PENDING_USER_OVERLAY_TITLE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets a custom title for the pending user overlay.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PERPLEXITY_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Perplexity API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  PGVECTOR_DB_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the database URL for model storage.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the maximum vector length for PGVector initialization.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PINECONE_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key used to authenticate with the Pinecone service.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  PINECONE_CLOUD: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the cloud provider where the Pinecone index is hosted.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PINECONE_DIMENSION: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'The dimensionality of the vector embeddings. Must match the dimension expected by the index (commonly 768, 1024, 1536, or 3072 based on model used).',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  PINECONE_ENVIRONMENT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the Pinecone environment to connect to (e.g., `us-west1-gcp`, `gcp-starter`, etc.).',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PINECONE_INDEX_NAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Defines the name of the Pinecone index that will be used to store and query vector embeddings.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PINECONE_METRIC: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the similarity metric to use for vector comparisons within the Pinecone index.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PIP_OPTIONS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies additional command-line options that pip should use when installing packages. For example, you can include flags such as `--upgrade`, `--user`, or `--no-cache-dir` to control the installation process.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PIP_PACKAGE_INDEX_OPTIONS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Defines custom package index behavior for pip. This can include specifying additional or alternate index URLs (e.g., `--extra-index-url`), authentication credentials, or other parameters to manage how packages are retrieved from different locations.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  PLAYWRIGHT_TIMEOUT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the timeout for Playwright requests.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  PLAYWRIGHT_WS_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description:
        'Specifies the WebSocket URI of a remote Playwright browser instance. When set, Open WebUI will use this remote browser instead of installing browser dependencies locally. This is particularly useful in containerized environments where you want to keep the Open WebUI container lightweight and separate browser concerns. Example: `ws://playwright:3000`',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  PORT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the port to run Open WebUI from.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  QDRANT_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Qdrant.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  QDRANT_GRPC_PORT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the gRPC port number for Qdrant.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_PORT → text-field'],
    decisionReason: 'pattern-rule: *_PORT → text-field',
  },
  QDRANT_ON_DISK: {
    component: 'toggle-field',
    props: {
      description: 'Enable the usage of memmap(also known as on-disk) storage',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  QDRANT_PREFER_GRPC: {
    component: 'toggle-field',
    props: {
      description: 'Use gPRC interface whenever possible',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  QDRANT_URI: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the URI for Qdrant.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  QUERY_GENERATION_PROMPT_TEMPLATE: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Sets the prompt template for query generation.',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['explicit-override: markdown-text-area'],
    decisionReason: 'explicit-override: markdown-text-area',
  },
  RAG_ALLOWED_FILE_EXTENSIONS: {
    component: 'array-field',
    props: {
      description: 'Specifies which file extensions are permitted for upload.',
    },
    wrappers: [],
    alternatives: ['tags-input', 'multi-select'],
    decisionPath: ['explicit-override: array-field'],
    decisionReason: 'explicit-override: array-field',
  },
} as const;

const componentMappingsPart6: Record<string, ComponentMapping> = {
  RAG_EMBEDDING_BATCH_SIZE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the batch size for embedding in RAG (Retrieval-Augmented Generator) models.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  RAG_EMBEDDING_CONTENT_PREFIX: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the prefix for the RAG embedding content.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  RAG_EMBEDDING_ENGINE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'ollama',
          label: 'Ollama',
        },
        {
          value: 'openai',
          label: 'Openai',
        },
      ],
      description:
        'Selects an embedding engine to use for RAG.\n\nOptions:\n  - `ollama` - Uses the Ollama API for embeddings.\n  - `openai` - Uses the OpenAI API for embeddings.\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  RAG_EMBEDDING_MODEL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets a model for embeddings. Locally, a Sentence-Transformer model is used.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  RAG_EMBEDDING_MODEL_AUTO_UPDATE: {
    component: 'toggle-field',
    props: {
      description: 'Toggles automatic update of the Sentence-Transformer model.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE: {
    component: 'toggle-field',
    props: {
      description:
        'Determines whether to allow custom models defined on the Hub in their own modeling files.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  RAG_EMBEDDING_OPENAI_BATCH_SIZE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the batch size for OpenAI embeddings.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  RAG_EMBEDDING_PREFIX_FIELD_NAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the field name for the RAG embedding prefix.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  RAG_EMBEDDING_QUERY_PREFIX: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the prefix for the RAG embedding query.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  RAG_FILE_MAX_COUNT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the maximum number of files that can be uploaded at once for document ingestion.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  RAG_FILE_MAX_SIZE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the maximum size of a file in megabytes that can be uploaded for document ingestion.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  RAG_FULL_CONTEXT: {
    component: 'toggle-field',
    props: {
      description: 'Specifies whether to use the full context for RAG.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  RAG_OLLAMA_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Ollama API used in RAG models.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['explicit-override: secret-field'],
    decisionReason: 'explicit-override: secret-field',
  },
  RAG_OLLAMA_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the base URL for Ollama API used in RAG models.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  RAG_OPENAI_API_BASE_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the OpenAI base API URL to use for RAG embeddings.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  RAG_OPENAI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the OpenAI API key to use for RAG embeddings.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['explicit-override: secret-field'],
    decisionReason: 'explicit-override: secret-field',
  },
  RAG_RELEVANCE_THRESHOLD: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the relevance threshold to consider for documents when used with reranking.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: number → text-field'],
    decisionReason: 'type-default: number → text-field',
  },
  RAG_RERANKING_MODEL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets a model for reranking results. Locally, a Sentence-Transformer model is used.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  RAG_RERANKING_MODEL_AUTO_UPDATE: {
    component: 'toggle-field',
    props: {
      description: 'Toggles automatic update of the reranking model.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  RAG_RERANKING_MODEL_TRUST_REMOTE_CODE: {
    component: 'toggle-field',
    props: {
      description: 'Determines whether to allow custom models defined on the Hub in their own.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  RAG_TEMPLATE: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Template to use when injecting RAG documents into chat completion',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['explicit-override: markdown-text-area'],
    decisionReason: 'explicit-override: markdown-text-area',
  },
  RAG_TEXT_SPLITTER: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'character',
          label: 'Character',
        },
        {
          value: 'token',
          label: 'Token',
        },
      ],
      description:
        'Sets the text splitter for RAG models.\n\nOptions:\n  - `character` - `token`\n  - `token`\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  RAG_TOP_K: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the default number of results to consider for the embedding when using RAG.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  RAG_TOP_K_RERANKER: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the default number of results to consider for the reranker when using RAG.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  REDIS_SENTINEL_HOSTS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Comma-separated list of Redis Sentinels for app state. If specified, the "hostname" in `REDIS_URL` will be interpreted as the Sentinel service name.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  REDIS_SENTINEL_PORT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sentinel port for app state Redis.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_PORT → text-field'],
    decisionReason: 'pattern-rule: *_PORT → text-field',
  },
  REDIS_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Specifies the URL of the Redis instance for the app-state.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  RESET_CONFIG_ON_START: {
    component: 'toggle-field',
    props: {
      description: 'Resets the `config.json` file on startup.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  RESPONSE_WATERMARK: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets a custom text that will be included when you copy a message in the chat. E.g. `"This text is AI generated"` -> will add "This text is AI generated" to every message, when copied.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  S3_ACCESS_KEY_ID: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the access key ID for S3 storage.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_KEY* → secret-field'],
    decisionReason: 'pattern-rule: *_KEY* → secret-field',
  },
  S3_ADDRESSING_STYLE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        "Specifies the addressing style to use for S3 storage (e.g., 'path', 'virtual').",
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  S3_BUCKET_NAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the bucket name for S3 storage.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  S3_ENABLE_TAGGING: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Enables S3 object tagging after uploads for better organization, searching, and integration with file management policies. Always set to `False` when using Cloudflare R2, as R2 does not support object tagging.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  S3_ENDPOINT_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the endpoint URL for S3 storage.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  S3_KEY_PREFIX: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the key prefix for a S3 object.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_KEY* → secret-field'],
    decisionReason: 'pattern-rule: *_KEY* → secret-field',
  },
  S3_REGION_NAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the region name for S3 storage.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  S3_SECRET_ACCESS_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the secret access key for S3 storage.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_SECRET* → secret-field'],
    decisionReason: 'pattern-rule: *_SECRET* → secret-field',
  },
  S3_USE_ACCELERATE_ENDPOINT: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Specifies whether to use the accelerated endpoint for S3 storage.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_ENDPOINT* → url-input'],
    decisionReason: 'pattern-rule: *_ENDPOINT* → url-input',
  },
  SAFE_MODE: {
    component: 'toggle-field',
    props: {
      description:
        'Enables safe mode, which disables potentially unsafe features, deactivating all functions.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  SEARCHAPI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for SearchAPI.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  SEARCHAPI_ENGINE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the SearchAPI engine.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  SEARXNG_QUERY_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description:
        'The [SearXNG search API](https://docs.searxng.org/dev/search_api.html) URL supporting JSON output. `<query>` is replaced with',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  SERPAPI_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for SerpAPI.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  SERPAPI_ENGINE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the search engine to use for SerpAPI.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  SERPER_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Serper search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  SERPLY_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Serply search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  SERPSTACK_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Serpstack search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  SERPSTACK_HTTPS: {
    component: 'toggle-field',
    props: {
      description:
        'Configures the use of HTTPS for Serpstack requests. Free tier requests are restricted to HTTP only.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  SHOW_ADMIN_DETAILS: {
    component: 'toggle-field',
    props: {
      description: 'Toggles whether to show admin user details in the interface.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  SOUGOU_API_SID: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the Sogou API SID.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
} as const;

const componentMappingsPart7: Record<string, ComponentMapping> = {
  SOUGOU_API_SK: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the Sogou API SK.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  SSL_ASSERT_FINGERPRINT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the SSL assert fingerprint to use.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  STATIC_DIR: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the directory for static files, such as the favicon.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_DIR → text-field'],
    decisionReason: 'pattern-rule: *_DIR → text-field',
  },
  STORAGE_PROVIDER: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 's3',
          label: 'S3',
        },
        {
          value: 'gcs',
          label: 'Gcs',
        },
        {
          value: 'azure',
          label: 'Azure',
        },
      ],
      description:
        'Sets the storage provider.\n\nOptions:\n  - `s3` - uses the S3 client library and related environment variables mentioned in [Amazon S3 Storage](#amazon-s3-storage)\n  - `gcs` - uses the GCS client library and related environment variables mentioned in [Google Cloud Storage](#google-cloud-storage)\n  - `azure` - uses the Azure client library and related environment variables mentioned in [Microsoft Azure Storage](#microsoft-azure-storage)\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  TAGS_GENERATION_PROMPT_TEMPLATE: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Sets the prompt template for tag generation.',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['explicit-override: markdown-text-area'],
    decisionReason: 'explicit-override: markdown-text-area',
  },
  TASK_MODEL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'The default model to use for tasks such as title and web search query generation',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  TASK_MODEL_EXTERNAL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'The default model to use for tasks such as title and web search query generation',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  TAVILY_API_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the API key for Tavily search API.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['pattern-rule: *_API_KEY → secret-field'],
    decisionReason: 'pattern-rule: *_API_KEY → secret-field',
  },
  TAVILY_EXTRACT_DEPTH: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the extract depth for Tavily search results.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  THREAD_POOL_SIZE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the thread pool size for FastAPI/AnyIO blocking calls. By default (when set to 0) FastAPI/AnyIO use `40` threads. In case of large instances and many concurrent users, it may be needed to increase `THREAD_POOL_SIZE` to prevent blocking.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  TIKA_SERVER_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the URL for the Apache Tika server.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  TIKTOKEN_CACHE_DIR: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the directory for TikToken cache.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_DIR → text-field'],
    decisionReason: 'pattern-rule: *_DIR → text-field',
  },
  TIKTOKEN_ENCODING_NAME: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Sets the encoding name for TikToken.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['validation-influence: sensitive-field → secret-field'],
    decisionReason: 'validation-influence: sensitive-field → secret-field',
  },
  TITLE_GENERATION_PROMPT_TEMPLATE: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Prompt to use when generating chat titles.',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['explicit-override: markdown-text-area'],
    decisionReason: 'explicit-override: markdown-text-area',
  },
  TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Prompt to use when calling tools.',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['explicit-override: markdown-text-area'],
    decisionReason: 'explicit-override: markdown-text-area',
  },
  USER_PERMISSIONS_CHAT_CALL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables user permission to make calls in chats.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USER_PERMISSIONS_CHAT_CONTROLS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to access chat controls.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_CHAT_DELETE: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to delete chats.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_CHAT_EDIT: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to edit chats.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_CHAT_FILE_UPLOAD: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to upload files to chats.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_CHAT_MULTIPLE_MODELS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables user permission to use multiple models in chats.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USER_PERMISSIONS_CHAT_STT: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to use Speech-to-Text in chats.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_CHAT_TEMPORARY: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to create temporary chats.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables enforced temporary chats for users.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USER_PERMISSIONS_CHAT_TTS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to use Text-to-Speech in chats.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_FEATURES_CODE_INTERPRETER: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables user permission to use code interpreter feature.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables user permission to access direct tool servers.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USER_PERMISSIONS_FEATURES_IMAGE_GENERATION: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables user permission to use the image generation feature.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USER_PERMISSIONS_FEATURES_WEB_SEARCH: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables user permission to use the web search feature.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to access workspace knowledge.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables public sharing of workspace knowledge.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to access workspace models.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables public sharing of workspace models.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Enables or disables user permission to access workspace prompts.',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['pattern-rule: *_PROMPT* → markdown-text-area'],
    decisionReason: 'pattern-rule: *_PROMPT* → markdown-text-area',
  },
  USER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING: {
    component: 'markdown-text-area',
    props: {
      rows: 4,
      placeholder: 'Enter template content with placeholders...',
      description: 'Enables or disables public sharing of workspace prompts.',
    },
    wrappers: [],
    alternatives: ['textarea', 'code-editor'],
    decisionPath: ['pattern-rule: *_PROMPT* → markdown-text-area'],
    decisionReason: 'pattern-rule: *_PROMPT* → markdown-text-area',
  },
  USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS: {
    component: 'toggle-field',
    props: {
      description: 'Enables or disables user permission to access workspace tools.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Enables or disables public sharing of workspace tools.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  USE_CUDA_DOCKER: {
    component: 'toggle-field',
    props: {
      description:
        'Builds the Docker image with NVIDIA CUDA support. Enables GPU acceleration for local Whisper and embeddings.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  USE_OLLAMA_DOCKER: {
    component: 'toggle-field',
    props: {
      description: 'Builds the Docker image with a bundled Ollama instance.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  UVICORN_WORKERS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Controls the number of worker processes that Uvicorn spawns to handle requests. Each worker runs its own instance of the application in a separate process.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  VECTOR_DB: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'chroma',
          label: 'Chroma',
        },
        {
          value: 'elasticsearch',
          label: 'Elasticsearch',
        },
        {
          value: 'milvus',
          label: 'Milvus',
        },
        {
          value: 'opensearch',
          label: 'Opensearch',
        },
        {
          value: 'pgvector',
          label: 'Pgvector',
        },
        {
          value: 'pinecone',
          label: 'Pinecone',
        },
        {
          value: 'qdrant',
          label: 'Qdrant',
        },
      ],
      description:
        'Specifies which vector database system to use. This setting determines which vector storage system will be used for managing embeddings.',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['explicit-override: select-field'],
    decisionReason: 'explicit-override: select-field',
  },
  WEBHOOK_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets a webhook for integration with Discord/Slack/Microsoft Teams.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['explicit-override: url-input'],
    decisionReason: 'explicit-override: url-input',
  },
  WEBSOCKET_MANAGER: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the websocket manager to use (in this case, Redis).',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  WEBSOCKET_REDIS_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description:
        'Specifies the URL of the Redis instance for websocket communication. It is distinct from `REDIS_URL` and in practice, it is recommended to set both.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
  WEBSOCKET_SENTINEL_HOSTS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Comma-separated list of Redis Sentinels for websocket. If specified, the "hostname" in `WEBSOCKET_REDIS_URL` will be interpreted as the Sentinel service name.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  WEBSOCKET_SENTINEL_PORT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sentinel port for websocket Redis.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_PORT → text-field'],
    decisionReason: 'pattern-rule: *_PORT → text-field',
  },
  WEBUI_AUTH: {
    component: 'toggle-field',
    props: {
      description: 'This setting enables or disables authentication.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  WEBUI_AUTH_COOKIE_SAME_SITE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'lax',
          label: 'Lax',
        },
        {
          value: 'strict',
          label: 'Strict',
        },
        {
          value: 'none',
          label: 'None',
        },
      ],
      description:
        'Sets the `SameSite` attribute for auth cookies.\n\nOptions:\n  - `lax` - Sets the `SameSite` attribute to lax, allowing auth cookies to be sent with\nrequests initiated by third-party websites.\n  - `strict` - Sets the `SameSite` attribute to strict, blocking auth cookies from being sent\nwith requests initiated by third-party websites.\n  - `none` - Sets the `SameSite` attribute to none, allowing auth cookies to be sent with\nrequests initiated by third-party websites, but only over HTTPS.\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  WEBUI_AUTH_COOKIE_SECURE: {
    component: 'toggle-field',
    props: {
      description: 'Sets the `Secure` attribute for auth cookies if set to `True`.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  WEBUI_AUTH_TRUSTED_EMAIL_HEADER: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Defines the trusted request header for authentication. See [SSO docs](/features/sso).',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
} as const;

const componentMappingsPart8: Record<string, ComponentMapping> = {
  WEBUI_AUTH_TRUSTED_NAME_HEADER: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Defines the trusted request header for the username of anyone registering with the',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  WEBUI_BANNERS: {
    component: 'array-field',
    props: {
      description: 'List of banners to show to users. The format for banners are:',
    },
    wrappers: [],
    alternatives: ['tags-input', 'multi-select'],
    decisionPath: ['explicit-override: array-field'],
    decisionReason: 'explicit-override: array-field',
  },
  WEBUI_BUILD_HASH: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Used for identifying the Git SHA of the build for releases.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  WEBUI_NAME: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Sets the main WebUI name. Appends `(Open WebUI)` if overridden.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  WEBUI_SECRET_KEY: {
    component: 'secret-field',
    props: {
      autoComplete: 'new-password',
      type: 'password',
      description: 'Overrides the randomly generated string used for JSON Web Token.',
    },
    wrappers: ['plan-restricted-feature'],
    alternatives: ['password-input'],
    decisionPath: ['explicit-override: secret-field'],
    decisionReason: 'explicit-override: secret-field',
  },
  WEBUI_SESSION_COOKIE_SAME_SITE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'lax',
          label: 'Lax',
        },
        {
          value: 'strict',
          label: 'Strict',
        },
        {
          value: 'none',
          label: 'None',
        },
      ],
      description:
        'Sets the `SameSite` attribute for session cookies.\n\nOptions:\n  - `lax` - Sets the `SameSite` attribute to lax, allowing session cookies to be sent with\nrequests initiated by third-party websites.\n  - `strict` - Sets the `SameSite` attribute to strict, blocking session cookies from being sent\nwith requests initiated by third-party websites.\n  - `none` - Sets the `SameSite` attribute to none, allowing session cookies to be sent with\nrequests initiated by third-party websites, but only over HTTPS.\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  WEBUI_SESSION_COOKIE_SECURE: {
    component: 'toggle-field',
    props: {
      description: 'Sets the `Secure` attribute for session cookies if set to `True`.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  WEBUI_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description:
        'Specifies the URL where the Open WebUI is reachable. Currently used for search engine support.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['explicit-override: url-input'],
    decisionReason: 'explicit-override: url-input',
  },
  WEB_LOADER_ENGINE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'requests',
          label: 'Requests',
        },
        {
          value: 'playwright',
          label: 'Playwright',
        },
      ],
      description:
        'Specifies the loader to use for retrieving and processing web content.\n\nOptions:\n  - `requests` - Uses the Requests module with enhanced error handling.\n  - `playwright` - Uses Playwright for more advanced web page rendering and interaction.\n',
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['validation-influence: enum-values → select-field'],
    decisionReason: 'validation-influence: enum-values → select-field',
  },
  WEB_SEARCH_CONCURRENT_REQUESTS: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Number of concurrent requests to crawl web pages returned from search results.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  WEB_SEARCH_ENGINE: {
    component: 'select-field',
    props: {
      options: [
        {
          value: 'searxng',
          label: 'Searxng',
        },
        {
          value: 'google_pse',
          label: 'Google Pse',
        },
        {
          value: 'brave',
          label: 'Brave',
        },
        {
          value: 'kagi',
          label: 'Kagi',
        },
        {
          value: 'mojeek',
          label: 'Mojeek',
        },
        {
          value: 'bocha',
          label: 'Bocha',
        },
        {
          value: 'serpstack',
          label: 'Serpstack',
        },
        {
          value: 'serper',
          label: 'Serper',
        },
        {
          value: 'serply',
          label: 'Serply',
        },
        {
          value: 'searchapi',
          label: 'Searchapi',
        },
        {
          value: 'serpapi',
          label: 'Serpapi',
        },
        {
          value: 'duckduckgo',
          label: 'Duckduckgo',
        },
        {
          value: 'tavily',
          label: 'Tavily',
        },
        {
          value: 'jina',
          label: 'Jina',
        },
        {
          value: 'bing',
          label: 'Bing',
        },
        {
          value: 'exa',
          label: 'Exa',
        },
        {
          value: 'perplexity',
          label: 'Perplexity',
        },
        {
          value: 'sougou',
          label: 'Sougou',
        },
      ],
    },
    wrappers: [],
    alternatives: ['radio-group', 'combobox'],
    decisionPath: ['explicit-override: select-field'],
    decisionReason: 'explicit-override: select-field',
  },
  WEB_SEARCH_RESULT_COUNT: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Maximum number of search results to crawl.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: integer → text-field'],
    decisionReason: 'type-default: integer → text-field',
  },
  WEB_SEARCH_TRUST_ENV: {
    component: 'toggle-field',
    props: {
      description:
        'Enables proxy set by `http_proxy` and `https_proxy` during web search content fetching.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  WHISPER_LANGUAGE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Specifies the ISO 639-1 language Whisper uses for STT (ISO 639-2 for Hawaiian and Cantonese). Whisper predicts the language by default.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  WHISPER_MODEL: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Sets the Whisper model to use for Speech-to-Text. The backend used is faster_whisper with quantization to `int8`.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  WHISPER_MODEL_AUTO_UPDATE: {
    component: 'toggle-field',
    props: {
      description: 'Toggles automatic update of the Whisper model.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  WHISPER_MODEL_DIR: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description: 'Specifies the directory to store Whisper model files.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['pattern-rule: *_DIR → text-field'],
    decisionReason: 'pattern-rule: *_DIR → text-field',
  },
  WHISPER_VAD_FILTER: {
    component: 'toggle-field',
    props: {
      description:
        'Specifies whether to apply a Voice Activity Detection (VAD) filter to Whisper Speech-to-Text.',
    },
    wrappers: [],
    alternatives: ['checkbox', 'switch'],
    decisionPath: ['type-default: boolean → toggle-field'],
    decisionReason: 'type-default: boolean → toggle-field',
  },
  YOUTUBE_LOADER_LANGUAGE: {
    component: 'text-field',
    props: {
      autoComplete: 'off',
      description:
        'Comma-separated list of language codes to try when fetching YouTube video transcriptions, in priority order.',
    },
    wrappers: [],
    alternatives: ['textarea', 'input'],
    decisionPath: ['type-default: string → text-field'],
    decisionReason: 'type-default: string → text-field',
  },
  YOUTUBE_LOADER_PROXY_URL: {
    component: 'url-input',
    props: {
      type: 'url',
      placeholder: 'https://example.com',
      description: 'Sets the proxy URL for YouTube loader.',
    },
    wrappers: [],
    alternatives: ['text-field'],
    decisionPath: ['pattern-rule: *_URL → url-input'],
    decisionReason: 'pattern-rule: *_URL → url-input',
  },
} as const;

/**
 * Complete component mappings for all configuration fields
 * This registry contains the definitive component assignment for each field
 */
export const componentMappings: ComponentRegistry = {
  ...componentMappingsPart1,
  ...componentMappingsPart2,
  ...componentMappingsPart3,
  ...componentMappingsPart4,
  ...componentMappingsPart5,
  ...componentMappingsPart6,
  ...componentMappingsPart7,
  ...componentMappingsPart8,
} as const;

// Component Props Registry - Extracted props for each field's component
export const componentProps: Record<string, ComponentProps> = {
  WEBUI_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description:
      'Specifies the URL where the Open WebUI is reachable. Currently used for search engine support.',
  },
  ENABLE_SIGNUP: {
    description: 'Toggles user account creation.',
  },
  ENABLE_LOGIN_FORM: {
    description:
      'Toggles email, password, sign-in and "or" (only when `ENABLE_OAUTH_SIGNUP` is set to True) elements.',
  },
  DEFAULT_LOCALE: {
    autoComplete: 'off',
    description: 'Sets the default locale for the application.',
  },
  DEFAULT_MODELS: {
    description: 'Sets a default Language Model.',
  },
  DEFAULT_USER_ROLE: {
    options: [
      {
        value: 'pending',
        label: 'Pending',
      },
      {
        value: 'user',
        label: 'User',
      },
      {
        value: 'admin',
        label: 'Admin',
      },
    ],
    description:
      'Sets the default role assigned to new users.\n\nOptions:\n  - `pending` - New users are pending until their accounts are manually activated by an admin.\n  - `user` - New users are automatically activated with regular user permissions.\n  - `admin` - New users are automatically activated with administrator permissions.\n',
  },
  PENDING_USER_OVERLAY_TITLE: {
    autoComplete: 'off',
    description: 'Sets a custom title for the pending user overlay.',
  },
  PENDING_USER_OVERLAY_CONTENT: {
    autoComplete: 'off',
    description: 'Sets a custom text content for the pending user overlay.',
  },
  ENABLE_CHANNELS: {
    description: 'Enables or disables channel support.',
  },
  WEBHOOK_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets a webhook for integration with Discord/Slack/Microsoft Teams.',
  },
  ENABLE_ADMIN_EXPORT: {
    description: 'Controls whether admin users can export data.',
  },
  ENABLE_ADMIN_CHAT_ACCESS: {
    description: 'Enables admin users to access all chats.',
  },
  ENABLE_USER_WEBHOOKS: {
    description: 'Enables or disables user webhooks.',
  },
  RESPONSE_WATERMARK: {
    autoComplete: 'off',
    description:
      'Sets a custom text that will be included when you copy a message in the chat. E.g. `"This text is AI generated"` -> will add "This text is AI generated" to every message, when copied.',
  },
  THREAD_POOL_SIZE: {
    autoComplete: 'off',
    description:
      'Sets the thread pool size for FastAPI/AnyIO blocking calls. By default (when set to 0) FastAPI/AnyIO use `40` threads. In case of large instances and many concurrent users, it may be needed to increase `THREAD_POOL_SIZE` to prevent blocking.',
  },
  SHOW_ADMIN_DETAILS: {
    description: 'Toggles whether to show admin user details in the interface.',
  },
  ADMIN_EMAIL: {
    autoComplete: 'off',
    description: 'Sets the admin email shown by `SHOW_ADMIN_DETAILS`',
  },
  ENV: {
    options: [
      {
        value: 'dev',
        label: 'Dev',
      },
      {
        value: 'prod',
        label: 'Prod',
      },
    ],
    description:
      'Environment setting.\n\nOptions:\n  - `dev` - Enables the FastAPI API documentation on `/docs`\n  - `prod` - Automatically configures several environment variables\n',
  },
  ENABLE_PERSISTENT_CONFIG: {
    description:
      'If set to `False`, all `PersistentConfig` variables are treated as regular variables.',
  },
  CUSTOM_NAME: {
    autoComplete: 'off',
    description: 'Sets `WEBUI_NAME` but polls **api.openwebui.com** for metadata.',
  },
  WEBUI_NAME: {
    autoComplete: 'off',
    description: 'Sets the main WebUI name. Appends `(Open WebUI)` if overridden.',
  },
  PORT: {
    autoComplete: 'off',
    description: 'Sets the port to run Open WebUI from.',
  },
  ENABLE_REALTIME_CHAT_SAVE: {
    description:
      "When enabled, the system saves each chunk of streamed chat data to the database in real time to ensure maximum data persistency. This feature provides robust data recovery and allows accurate session tracking. However, the tradeoff is increased latency, as saving to the database introduces a delay. Disabling this feature can improve performance and reduce delays, but it risks potential data loss in the event of a system failure or crash. Use based on your application's requirements and acceptable tradeoffs.",
  },
  BYPASS_MODEL_ACCESS_CONTROL: {
    description: 'Bypasses model access control.',
  },
  WEBUI_BUILD_HASH: {
    autoComplete: 'off',
    description: 'Used for identifying the Git SHA of the build for releases.',
  },
  WEBUI_BANNERS: {
    description: 'List of banners to show to users. The format for banners are:',
  },
  USE_CUDA_DOCKER: {
    description:
      'Builds the Docker image with NVIDIA CUDA support. Enables GPU acceleration for local Whisper and embeddings.',
  },
  EXTERNAL_PWA_MANIFEST_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description:
      'When defined as a fully qualified URL (e.g., https://path/to/manifest.webmanifest), requests sent to /manifest.json will use the external manifest file. When not defined, the default manifest.json file will be used.',
  },
  ENABLE_TITLE_GENERATION: {
    description: 'Enables or disables chat title generation.',
  },
  LICENSE_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the license key to use (for Enterprise users only).',
  },
  SSL_ASSERT_FINGERPRINT: {
    autoComplete: 'off',
    description: 'Specifies the SSL assert fingerprint to use.',
  },
  DEFAULT_PROMPT_SUGGESTIONS: {
    description: 'List of prompt suggestions. The format for prompt suggestions are:',
  },
  AIOHTTP_CLIENT_TIMEOUT: {
    autoComplete: 'off',
    description:
      'Specifies the timeout duration in seconds for the AIOHTTP client. This impacts things',
  },
  AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST: {
    autoComplete: 'off',
    description:
      'Sets the timeout in seconds for fetching the model list. This can be useful in cases where network latency requires a longer timeout duration to successfully retrieve the model list.',
  },
  AIOHTTP_CLIENT_TIMEOUT_OPENAI_MODEL_LIST: {
    autoComplete: 'off',
    description:
      'Sets the timeout in seconds for fetching the model list. This can be useful in cases where network latency requires a longer timeout duration to successfully retrieve the model list.',
  },
  DATA_DIR: {
    autoComplete: 'off',
    description:
      'Specifies the base directory for data storage, including uploads, cache, vector database, etc.',
  },
  FONTS_DIR: {
    autoComplete: 'off',
    description: 'Specifies the directory for fonts.',
  },
  FRONTEND_BUILD_DIR: {
    autoComplete: 'off',
    description: 'Specifies the location of the built frontend files.',
  },
  STATIC_DIR: {
    autoComplete: 'off',
    description: 'Specifies the directory for static files, such as the favicon.',
  },
  ENABLE_OLLAMA_API: {
    description: 'Enables the use of Ollama APIs.',
  },
  OLLAMA_BASE_URLS: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Configures load-balanced Ollama backend hosts, separated by `;`. See',
  },
  USE_OLLAMA_DOCKER: {
    description: 'Builds the Docker image with a bundled Ollama instance.',
  },
  K8S_FLAG: {
    description:
      'If set, assumes Helm chart deployment and sets [`OLLAMA_BASE_URL`](#ollama_base_url) to `http://ollama-service.open-webui.svc.cluster.local:11434`',
  },
  ENABLE_OPENAI_API: {
    description: 'Enables the use of OpenAI APIs.',
  },
  OPENAI_API_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Configures the OpenAI base API URL.',
  },
  OPENAI_API_BASE_URLS: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Supports balanced OpenAI base API URLs, semicolon-separated.',
  },
  OPENAI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the OpenAI API key.',
  },
  OPENAI_API_KEYS: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Supports multiple OpenAI API keys, semicolon-separated.',
  },
  TASK_MODEL: {
    autoComplete: 'off',
    description: 'The default model to use for tasks such as title and web search query generation',
  },
  TASK_MODEL_EXTERNAL: {
    autoComplete: 'off',
    description: 'The default model to use for tasks such as title and web search query generation',
  },
  TITLE_GENERATION_PROMPT_TEMPLATE: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Prompt to use when generating chat titles.',
  },
  TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Prompt to use when calling tools.',
  },
  ENABLE_CODE_EXECUTION: {
    description: 'Enables or disables code execution.',
  },
  CODE_EXECUTION_ENGINE: {
    options: [
      {
        value: 'jupyter',
        label: 'Jupyter',
      },
      {
        value: 'pyodide',
        label: 'Pyodide',
      },
    ],
    description: 'Specifies the code execution engine to use.',
  },
  CODE_EXECUTION_JUPYTER_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Specifies the Jupyter URL to use for code execution.',
  },
  CODE_EXECUTION_JUPYTER_AUTH: {
    autoComplete: 'off',
    description: 'Specifies the Jupyter authentication method to use for code execution.',
  },
  CODE_EXECUTION_JUPYTER_AUTH_TOKEN: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the Jupyter authentication token to use for code execution.',
  },
  CODE_EXECUTION_JUPYTER_AUTH_PASSWORD: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the Jupyter authentication password to use for code execution.',
  },
  CODE_EXECUTION_JUPYTER_TIMEOUT: {
    autoComplete: 'off',
    description: 'Specifies the timeout for Jupyter code execution.',
  },
  ENABLE_CODE_INTERPRETER: {
    description: 'Enables or disables code interpreter.',
  },
  CODE_INTERPRETER_ENGINE: {
    options: [
      {
        value: 'jupyter',
        label: 'Jupyter',
      },
      {
        value: 'pyodide',
        label: 'Pyodide',
      },
    ],
    description: 'Specifies the code interpreter engine to use.',
  },
  CODE_INTERPRETER_PROMPT_TEMPLATE: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Specifies the prompt template to use for code interpreter.',
  },
  CODE_INTERPRETER_JUPYTER_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Specifies the Jupyter URL to use for code interpreter.',
  },
  CODE_INTERPRETER_JUPYTER_AUTH: {
    autoComplete: 'off',
    description: 'Specifies the Jupyter authentication method to use for code interpreter.',
  },
  CODE_INTERPRETER_JUPYTER_AUTH_TOKEN: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the Jupyter authentication token to use for code interpreter.',
  },
  CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the Jupyter authentication password to use for code interpreter.',
  },
  CODE_INTERPRETER_JUPYTER_TIMEOUT: {
    autoComplete: 'off',
    description: 'Specifies the timeout for the Jupyter code interpreter.',
  },
  ENABLE_DIRECT_CONNECTIONS: {
    description: 'Enables or disables direct connections.',
  },
  ENABLE_AUTOCOMPLETE_GENERATION: {
    description: 'Enables or disables autocomplete generation.',
  },
  AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH: {
    autoComplete: 'off',
    description: 'Sets the maximum input length for autocomplete generation.',
  },
  AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Sets the prompt template for autocomplete generation.',
  },
  ENABLE_EVALUATION_ARENA_MODELS: {
    description: 'Enables or disables evaluation arena models.',
  },
  ENABLE_MESSAGE_RATING: {
    description: 'Enables message rating feature.',
  },
  ENABLE_COMMUNITY_SHARING: {
    description: 'Controls whether users are shown the share to community button.',
  },
  ENABLE_TAGS_GENERATION: {
    description: 'Enables or disables tag generation.',
  },
  TAGS_GENERATION_PROMPT_TEMPLATE: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Sets the prompt template for tag generation.',
  },
  ENABLE_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Enables API key authentication.',
  },
  ENABLE_API_KEY_ENDPOINT_RESTRICTIONS: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Enables API key endpoint restrictions for added security and configurability.',
  },
  API_KEY_ALLOWED_ENDPOINTS: {
    autoComplete: 'new-password',
    type: 'password',
    description:
      'Specifies a comma-separated list of allowed API endpoints when API key endpoint restrictions are enabled.',
  },
  JWT_EXPIRES_IN: {
    autoComplete: 'off',
    description:
      'Sets the JWT expiration time in seconds. Valid time units: `s`, `m`, `h`, `d`, `w` or `-1` for no expiration.',
  },
  ENABLE_FORWARD_USER_INFO_HEADERS: {
    description:
      'Forwards user information (name, ID, email, and role) as X-headers to OpenAI API and Ollama API.',
  },
  ENABLE_WEB_LOADER_SSL_VERIFICATION: {
    description: 'Bypass SSL Verification for RAG on Websites.',
  },
  WEBUI_SESSION_COOKIE_SAME_SITE: {
    options: [
      {
        value: 'lax',
        label: 'Lax',
      },
      {
        value: 'strict',
        label: 'Strict',
      },
      {
        value: 'none',
        label: 'None',
      },
    ],
    description:
      'Sets the `SameSite` attribute for session cookies.\n\nOptions:\n  - `lax` - Sets the `SameSite` attribute to lax, allowing session cookies to be sent with\nrequests initiated by third-party websites.\n  - `strict` - Sets the `SameSite` attribute to strict, blocking session cookies from being sent\nwith requests initiated by third-party websites.\n  - `none` - Sets the `SameSite` attribute to none, allowing session cookies to be sent with\nrequests initiated by third-party websites, but only over HTTPS.\n',
  },
  WEBUI_SESSION_COOKIE_SECURE: {
    description: 'Sets the `Secure` attribute for session cookies if set to `True`.',
  },
  WEBUI_AUTH_COOKIE_SAME_SITE: {
    options: [
      {
        value: 'lax',
        label: 'Lax',
      },
      {
        value: 'strict',
        label: 'Strict',
      },
      {
        value: 'none',
        label: 'None',
      },
    ],
    description:
      'Sets the `SameSite` attribute for auth cookies.\n\nOptions:\n  - `lax` - Sets the `SameSite` attribute to lax, allowing auth cookies to be sent with\nrequests initiated by third-party websites.\n  - `strict` - Sets the `SameSite` attribute to strict, blocking auth cookies from being sent\nwith requests initiated by third-party websites.\n  - `none` - Sets the `SameSite` attribute to none, allowing auth cookies to be sent with\nrequests initiated by third-party websites, but only over HTTPS.\n',
  },
  WEBUI_AUTH_COOKIE_SECURE: {
    description: 'Sets the `Secure` attribute for auth cookies if set to `True`.',
  },
  WEBUI_AUTH: {
    description: 'This setting enables or disables authentication.',
  },
  WEBUI_SECRET_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Overrides the randomly generated string used for JSON Web Token.',
  },
  OFFLINE_MODE: {
    description: 'Enables or disables offline mode.',
  },
  RESET_CONFIG_ON_START: {
    description: 'Resets the `config.json` file on startup.',
  },
  SAFE_MODE: {
    description:
      'Enables safe mode, which disables potentially unsafe features, deactivating all functions.',
  },
  CORS_ALLOW_ORIGIN: {
    autoComplete: 'off',
    description: 'Sets the allowed origins for Cross-Origin Resource Sharing (CORS).',
  },
  RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE: {
    description:
      'Determines whether to allow custom models defined on the Hub in their own modeling files.',
  },
  RAG_RERANKING_MODEL_TRUST_REMOTE_CODE: {
    description: 'Determines whether to allow custom models defined on the Hub in their own.',
  },
  RAG_EMBEDDING_MODEL_AUTO_UPDATE: {
    description: 'Toggles automatic update of the Sentence-Transformer model.',
  },
  RAG_RERANKING_MODEL_AUTO_UPDATE: {
    description: 'Toggles automatic update of the reranking model.',
  },
  VECTOR_DB: {
    options: [
      {
        value: 'chroma',
        label: 'Chroma',
      },
      {
        value: 'elasticsearch',
        label: 'Elasticsearch',
      },
      {
        value: 'milvus',
        label: 'Milvus',
      },
      {
        value: 'opensearch',
        label: 'Opensearch',
      },
      {
        value: 'pgvector',
        label: 'Pgvector',
      },
      {
        value: 'pinecone',
        label: 'Pinecone',
      },
      {
        value: 'qdrant',
        label: 'Qdrant',
      },
    ],
    description:
      'Specifies which vector database system to use. This setting determines which vector storage system will be used for managing embeddings.',
  },
  CHROMA_TENANT: {
    autoComplete: 'off',
    description: 'Sets the tenant for ChromaDB to use for RAG embeddings.',
  },
  CHROMA_DATABASE: {
    autoComplete: 'off',
    description: 'Sets the database in the ChromaDB tenant to use for RAG embeddings.',
  },
  CHROMA_HTTP_HOST: {
    autoComplete: 'off',
    description:
      'Specifies the hostname of a remote ChromaDB Server. Uses a local ChromaDB instance if not set.',
  },
  CHROMA_HTTP_PORT: {
    autoComplete: 'off',
    description: 'Specifies the port of a remote ChromaDB Server.',
  },
  CHROMA_HTTP_HEADERS: {
    autoComplete: 'off',
    description: 'A comma-separated list of HTTP headers to include with every ChromaDB request.',
  },
  CHROMA_HTTP_SSL: {
    description: 'Controls whether or not SSL is used for ChromaDB Server connections.',
  },
  CHROMA_CLIENT_AUTH_PROVIDER: {
    autoComplete: 'off',
    description: 'Specifies an authentication provider for remote ChromaDB Server.',
  },
  CHROMA_CLIENT_AUTH_CREDENTIALS: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies auth credentials for remote ChromaDB Server.',
  },
  ELASTICSEARCH_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the Elasticsearch API key.',
  },
  ELASTICSEARCH_CA_CERTS: {
    autoComplete: 'off',
    description: 'Specifies the path to the CA certificates for Elasticsearch.',
  },
  ELASTICSEARCH_CLOUD_ID: {
    autoComplete: 'off',
    description: 'Specifies the Elasticsearch cloud ID.',
  },
  ELASTICSEARCH_INDEX_PREFIX: {
    autoComplete: 'off',
    description: 'Specifies the prefix for the Elasticsearch index.',
  },
  ELASTICSEARCH_PASSWORD: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the password for Elasticsearch.',
  },
  ELASTICSEARCH_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Specifies the URL for the Elasticsearch instance.',
  },
  ELASTICSEARCH_USERNAME: {
    autoComplete: 'off',
    description: 'Specifies the username for Elasticsearch.',
  },
  MILVUS_URI: {
    autoComplete: 'off',
    description:
      'Specifies the URI for connecting to the Milvus vector database. This can point to a local or remote Milvus server based on the deployment configuration.',
  },
  MILVUS_DB: {
    autoComplete: 'off',
    description: 'Specifies the database to connect to within a Milvus instance.',
  },
  MILVUS_TOKEN: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies an optional connection token for Milvus.',
  },
  MILVUS_INDEX_TYPE: {
    options: [
      {
        value: 'AUTOINDEX',
        label: 'AUTOINDEX',
      },
      {
        value: 'FLAT',
        label: 'FLAT',
      },
      {
        value: 'HNSW',
        label: 'HNSW',
      },
      {
        value: 'IVF_FLAT',
        label: 'IVF FLAT',
      },
    ],
    description:
      'Specifies the index type to use when creating a new collection in Milvus. `AUTOINDEX` is generally recommended for Milvus standalone. `HNSW` may offer better performance but typically requires a clustered Milvus setup.',
  },
  MILVUS_METRIC_TYPE: {
    autoComplete: 'off',
    description: 'Specifies the metric type for vector similarity search in Milvus.',
  },
  MILVUS_HNSW_M: {
    autoComplete: 'off',
    description:
      'Specifies the `M` parameter for the HNSW index type in Milvus. This influences the number of bi-directional links created for each new element during construction. Only applicable if `MILVUS_INDEX_TYPE` is `HNSW`.',
  },
  MILVUS_HNSW_EFCONSTRUCTION: {
    autoComplete: 'off',
    description:
      'Specifies the `efConstruction` parameter for the HNSW index type in Milvus. This influences the size of the dynamic list for the nearest neighbors during index construction. Only applicable if `MILVUS_INDEX_TYPE` is `HNSW`.',
  },
  MILVUS_IVF_FLAT_NLIST: {
    autoComplete: 'off',
    description:
      'Specifies the `nlist` parameter for the IVF_FLAT index type in Milvus. This is the number of cluster units. Only applicable if `MILVUS_INDEX_TYPE` is `IVF_FLAT`.',
  },
  OPENSEARCH_CERT_VERIFY: {
    description: 'Enables or disables OpenSearch certificate verification.',
  },
  OPENSEARCH_PASSWORD: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the password for OpenSearch.',
  },
  OPENSEARCH_SSL: {
    description: 'Enables or disables SSL for OpenSearch.',
  },
  OPENSEARCH_URI: {
    autoComplete: 'off',
    description: 'Sets the URI for OpenSearch.',
  },
  OPENSEARCH_USERNAME: {
    autoComplete: 'off',
    description: 'Sets the username for OpenSearch.',
  },
  PGVECTOR_DB_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the database URL for model storage.',
  },
  PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH: {
    autoComplete: 'off',
    description: 'Specifies the maximum vector length for PGVector initialization.',
  },
  QDRANT_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Qdrant.',
  },
  QDRANT_URI: {
    autoComplete: 'off',
    description: 'Sets the URI for Qdrant.',
  },
  QDRANT_ON_DISK: {
    description: 'Enable the usage of memmap(also known as on-disk) storage',
  },
  QDRANT_PREFER_GRPC: {
    description: 'Use gPRC interface whenever possible',
  },
  QDRANT_GRPC_PORT: {
    autoComplete: 'off',
    description: 'Sets the gRPC port number for Qdrant.',
  },
  ENABLE_QDRANT_MULTITENANCY_MODE: {
    description:
      'Enables multitenancy pattern for Qdrant collections management, which significantly reduces RAM usage and computational overhead by consolidating similar vector data structures. Recommend turn on',
  },
  PINECONE_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key used to authenticate with the Pinecone service.',
  },
  PINECONE_ENVIRONMENT: {
    autoComplete: 'off',
    description:
      'Specifies the Pinecone environment to connect to (e.g., `us-west1-gcp`, `gcp-starter`, etc.).',
  },
  PINECONE_INDEX_NAME: {
    autoComplete: 'off',
    description:
      'Defines the name of the Pinecone index that will be used to store and query vector embeddings.',
  },
  PINECONE_DIMENSION: {
    autoComplete: 'off',
    description:
      'The dimensionality of the vector embeddings. Must match the dimension expected by the index (commonly 768, 1024, 1536, or 3072 based on model used).',
  },
  PINECONE_METRIC: {
    autoComplete: 'off',
    description:
      'Specifies the similarity metric to use for vector comparisons within the Pinecone index.',
  },
  PINECONE_CLOUD: {
    autoComplete: 'off',
    description: 'Specifies the cloud provider where the Pinecone index is hosted.',
  },
  CONTENT_EXTRACTION_ENGINE: {
    options: [
      {
        value: 'external',
        label: 'External',
      },
      {
        value: 'tika',
        label: 'Tika',
      },
      {
        value: 'docling',
        label: 'Docling',
      },
      {
        value: 'document_intelligence',
        label: 'Document Intelligence',
      },
      {
        value: 'mistral_ocr',
        label: 'Mistral Ocr',
      },
    ],
    description:
      'Sets the content extraction engine to use for document ingestion.\n\nOptions:\n  - `external` - Use external loader\n  - `tika` - Use a local Apache Tika server\n  - `docling` - Use Docling engine\n  - `document_intelligence` - Use Document Intelligence engine\n  - `mistral_ocr` - Use Mistral OCR engine\n',
  },
  MISTRAL_OCR_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the Mistral OCR API key to use.',
  },
  EXTERNAL_DOCUMENT_LOADER_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the URL for the external document loader service.',
  },
  EXTERNAL_DOCUMENT_LOADER_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for authenticating with the external document loader service.',
  },
  TIKA_SERVER_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the URL for the Apache Tika server.',
  },
  DOCLING_SERVER_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Specifies the URL for the Docling server.',
  },
  DOCLING_OCR_ENGINE: {
    autoComplete: 'off',
    description: 'Specifies the OCR engine used by Docling.',
  },
  DOCLING_OCR_LANG: {
    autoComplete: 'off',
    description:
      'Specifies the OCR language(s) to be used with the configured `DOCLING_OCR_ENGINE`.',
  },
  RAG_EMBEDDING_ENGINE: {
    options: [
      {
        value: 'ollama',
        label: 'Ollama',
      },
      {
        value: 'openai',
        label: 'Openai',
      },
    ],
    description:
      'Selects an embedding engine to use for RAG.\n\nOptions:\n  - `ollama` - Uses the Ollama API for embeddings.\n  - `openai` - Uses the OpenAI API for embeddings.\n',
  },
  RAG_EMBEDDING_MODEL: {
    autoComplete: 'off',
    description: 'Sets a model for embeddings. Locally, a Sentence-Transformer model is used.',
  },
  ENABLE_RAG_HYBRID_SEARCH: {
    description:
      'Enables the use of ensemble search with `BM25` + `ChromaDB`, with reranking using',
  },
  RAG_TOP_K: {
    autoComplete: 'off',
    description: 'Sets the default number of results to consider for the embedding when using RAG.',
  },
  RAG_TOP_K_RERANKER: {
    autoComplete: 'off',
    description: 'Sets the default number of results to consider for the reranker when using RAG.',
  },
  RAG_RELEVANCE_THRESHOLD: {
    autoComplete: 'off',
    description: 'Sets the relevance threshold to consider for documents when used with reranking.',
  },
  RAG_TEMPLATE: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Template to use when injecting RAG documents into chat completion',
  },
  RAG_TEXT_SPLITTER: {
    options: [
      {
        value: 'character',
        label: 'Character',
      },
      {
        value: 'token',
        label: 'Token',
      },
    ],
    description:
      'Sets the text splitter for RAG models.\n\nOptions:\n  - `character` - `token`\n  - `token`\n',
  },
  TIKTOKEN_CACHE_DIR: {
    autoComplete: 'off',
    description: 'Sets the directory for TikToken cache.',
  },
  TIKTOKEN_ENCODING_NAME: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the encoding name for TikToken.',
  },
  CHUNK_SIZE: {
    autoComplete: 'off',
    description: 'Sets the document chunk size for embeddings.',
  },
  CHUNK_OVERLAP: {
    autoComplete: 'off',
    description: 'Specifies how much overlap there should be between chunks.',
  },
  PDF_EXTRACT_IMAGES: {
    description: 'Extracts images from PDFs using OCR when loading documents.',
  },
  RAG_FILE_MAX_SIZE: {
    autoComplete: 'off',
    description:
      'Sets the maximum size of a file in megabytes that can be uploaded for document ingestion.',
  },
  RAG_FILE_MAX_COUNT: {
    autoComplete: 'off',
    description:
      'Sets the maximum number of files that can be uploaded at once for document ingestion.',
  },
  RAG_ALLOWED_FILE_EXTENSIONS: {
    description: 'Specifies which file extensions are permitted for upload.',
  },
  RAG_RERANKING_MODEL: {
    autoComplete: 'off',
    description:
      'Sets a model for reranking results. Locally, a Sentence-Transformer model is used.',
  },
  RAG_OPENAI_API_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the OpenAI base API URL to use for RAG embeddings.',
  },
  RAG_OPENAI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the OpenAI API key to use for RAG embeddings.',
  },
  RAG_EMBEDDING_OPENAI_BATCH_SIZE: {
    autoComplete: 'off',
    description: 'Sets the batch size for OpenAI embeddings.',
  },
  RAG_EMBEDDING_BATCH_SIZE: {
    autoComplete: 'off',
    description: 'Sets the batch size for embedding in RAG (Retrieval-Augmented Generator) models.',
  },
  RAG_OLLAMA_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Ollama API used in RAG models.',
  },
  RAG_OLLAMA_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the base URL for Ollama API used in RAG models.',
  },
  ENABLE_RETRIEVAL_QUERY_GENERATION: {
    description: 'Enables or disables retrieval query generation.',
  },
  QUERY_GENERATION_PROMPT_TEMPLATE: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Sets the prompt template for query generation.',
  },
  BYPASS_EMBEDDING_AND_RETRIEVAL: {
    description: 'Bypasses the embedding and retrieval process.',
  },
  DOCUMENT_INTELLIGENCE_ENDPOINT: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Specifies the endpoint for document intelligence.',
  },
  DOCUMENT_INTELLIGENCE_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the key for document intelligence.',
  },
  ENABLE_RAG_LOCAL_WEB_FETCH: {
    description: 'Enables or disables local web fetch for RAG.',
  },
  RAG_EMBEDDING_CONTENT_PREFIX: {
    autoComplete: 'off',
    description: 'Specifies the prefix for the RAG embedding content.',
  },
  RAG_EMBEDDING_PREFIX_FIELD_NAME: {
    autoComplete: 'off',
    description: 'Specifies the field name for the RAG embedding prefix.',
  },
  RAG_EMBEDDING_QUERY_PREFIX: {
    autoComplete: 'off',
    description: 'Specifies the prefix for the RAG embedding query.',
  },
  RAG_FULL_CONTEXT: {
    description: 'Specifies whether to use the full context for RAG.',
  },
  ENABLE_GOOGLE_DRIVE_INTEGRATION: {
    description:
      'Enables or disables Google Drive integration. If set to true, and `GOOGLE_DRIVE_CLIENT_ID` & `GOOGLE_DRIVE_API_KEY` are both configured, Google Drive will appear as an upload option in the chat UI.',
  },
  GOOGLE_DRIVE_CLIENT_ID: {
    autoComplete: 'off',
    description:
      'Sets the client ID for Google Drive (client must be configured with Drive API and Picker API enabled).',
  },
  GOOGLE_DRIVE_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Google Drive integration.',
  },
  ENABLE_ONEDRIVE_INTEGRATION: {
    description: 'Enables or disables OneDrive integration.',
  },
  ONEDRIVE_CLIENT_ID: {
    autoComplete: 'off',
    description: 'Specifies the client ID for OneDrive integration.',
  },
  ENABLE_WEB_SEARCH: {
    description: 'Enable web search toggle.',
  },
  ENABLE_SEARCH_QUERY_GENERATION: {
    description: 'Enables or disables search query generation.',
  },
  WEB_SEARCH_TRUST_ENV: {
    description:
      'Enables proxy set by `http_proxy` and `https_proxy` during web search content fetching.',
  },
  WEB_SEARCH_RESULT_COUNT: {
    autoComplete: 'off',
    description: 'Maximum number of search results to crawl.',
  },
  WEB_SEARCH_CONCURRENT_REQUESTS: {
    autoComplete: 'off',
    description: 'Number of concurrent requests to crawl web pages returned from search results.',
  },
  WEB_SEARCH_ENGINE: {
    options: [
      {
        value: 'searxng',
        label: 'Searxng',
      },
      {
        value: 'google_pse',
        label: 'Google Pse',
      },
      {
        value: 'brave',
        label: 'Brave',
      },
      {
        value: 'kagi',
        label: 'Kagi',
      },
      {
        value: 'mojeek',
        label: 'Mojeek',
      },
      {
        value: 'bocha',
        label: 'Bocha',
      },
      {
        value: 'serpstack',
        label: 'Serpstack',
      },
      {
        value: 'serper',
        label: 'Serper',
      },
      {
        value: 'serply',
        label: 'Serply',
      },
      {
        value: 'searchapi',
        label: 'Searchapi',
      },
      {
        value: 'serpapi',
        label: 'Serpapi',
      },
      {
        value: 'duckduckgo',
        label: 'Duckduckgo',
      },
      {
        value: 'tavily',
        label: 'Tavily',
      },
      {
        value: 'jina',
        label: 'Jina',
      },
      {
        value: 'bing',
        label: 'Bing',
      },
      {
        value: 'exa',
        label: 'Exa',
      },
      {
        value: 'perplexity',
        label: 'Perplexity',
      },
      {
        value: 'sougou',
        label: 'Sougou',
      },
    ],
  },
  BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL: {
    description: 'Bypasses the web search embedding and retrieval process.',
  },
  SEARXNG_QUERY_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description:
      'The [SearXNG search API](https://docs.searxng.org/dev/search_api.html) URL supporting JSON output. `<query>` is replaced with',
  },
  GOOGLE_PSE_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for the Google Programmable Search Engine (PSE) service.',
  },
  GOOGLE_PSE_ENGINE_ID: {
    autoComplete: 'off',
    description: 'The engine ID for the Google Programmable Search Engine (PSE) service.',
  },
  BRAVE_SEARCH_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for the Brave Search API.',
  },
  KAGI_SEARCH_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Kagi Search API.',
  },
  MOJEEK_SEARCH_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Mojeek Search API.',
  },
  SERPSTACK_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Serpstack search API.',
  },
  SERPSTACK_HTTPS: {
    description:
      'Configures the use of HTTPS for Serpstack requests. Free tier requests are restricted to HTTP only.',
  },
  SERPER_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Serper search API.',
  },
  SERPLY_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Serply search API.',
  },
  SEARCHAPI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for SearchAPI.',
  },
  SEARCHAPI_ENGINE: {
    autoComplete: 'off',
    description: 'Sets the SearchAPI engine.',
  },
  TAVILY_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Tavily search API.',
  },
  JINA_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Jina.',
  },
  BING_SEARCH_V7_ENDPOINT: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the endpoint for Bing Search API.',
  },
  BING_SEARCH_V7_SUBSCRIPTION_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the subscription key for Bing Search API.',
  },
  BOCHA_SEARCH_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Bocha Search API.',
  },
  EXA_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Exa search API.',
  },
  SERPAPI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for SerpAPI.',
  },
  SERPAPI_ENGINE: {
    autoComplete: 'off',
    description: 'Specifies the search engine to use for SerpAPI.',
  },
  SOUGOU_API_SID: {
    autoComplete: 'off',
    description: 'Sets the Sogou API SID.',
  },
  SOUGOU_API_SK: {
    autoComplete: 'off',
    description: 'Sets the Sogou API SK.',
  },
  TAVILY_EXTRACT_DEPTH: {
    autoComplete: 'off',
    description: 'Specifies the extract depth for Tavily search results.',
  },
  WEB_LOADER_ENGINE: {
    options: [
      {
        value: 'requests',
        label: 'Requests',
      },
      {
        value: 'playwright',
        label: 'Playwright',
      },
    ],
    description:
      'Specifies the loader to use for retrieving and processing web content.\n\nOptions:\n  - `requests` - Uses the Requests module with enhanced error handling.\n  - `playwright` - Uses Playwright for more advanced web page rendering and interaction.\n',
  },
  PLAYWRIGHT_WS_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description:
      'Specifies the WebSocket URI of a remote Playwright browser instance. When set, Open WebUI will use this remote browser instead of installing browser dependencies locally. This is particularly useful in containerized environments where you want to keep the Open WebUI container lightweight and separate browser concerns. Example: `ws://playwright:3000`',
  },
  FIRECRAWL_API_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the base URL for Firecrawl API.',
  },
  FIRECRAWL_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Firecrawl API.',
  },
  PERPLEXITY_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Perplexity API.',
  },
  PLAYWRIGHT_TIMEOUT: {
    autoComplete: 'off',
    description: 'Specifies the timeout for Playwright requests.',
  },
  YOUTUBE_LOADER_PROXY_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the proxy URL for YouTube loader.',
  },
  YOUTUBE_LOADER_LANGUAGE: {
    autoComplete: 'off',
    description:
      'Comma-separated list of language codes to try when fetching YouTube video transcriptions, in priority order.',
  },
  WHISPER_MODEL: {
    autoComplete: 'off',
    description:
      'Sets the Whisper model to use for Speech-to-Text. The backend used is faster_whisper with quantization to `int8`.',
  },
  WHISPER_MODEL_DIR: {
    autoComplete: 'off',
    description: 'Specifies the directory to store Whisper model files.',
  },
  WHISPER_VAD_FILTER: {
    description:
      'Specifies whether to apply a Voice Activity Detection (VAD) filter to Whisper Speech-to-Text.',
  },
  WHISPER_MODEL_AUTO_UPDATE: {
    description: 'Toggles automatic update of the Whisper model.',
  },
  WHISPER_LANGUAGE: {
    autoComplete: 'off',
    description:
      'Specifies the ISO 639-1 language Whisper uses for STT (ISO 639-2 for Hawaiian and Cantonese). Whisper predicts the language by default.',
  },
  AUDIO_STT_ENGINE: {
    options: [
      {
        value: 'openai',
        label: 'Openai',
      },
      {
        value: 'deepgram',
        label: 'Deepgram',
      },
    ],
    description:
      'Specifies the Speech-to-Text engine to use.\n\nOptions:\n  - `openai` - Uses OpenAI engine for Speech-to-Text.\n  - `deepgram` - Uses Deepgram engine for Speech-to-Text.\n',
  },
  AUDIO_STT_MODEL: {
    autoComplete: 'off',
    description: 'Specifies the Speech-to-Text model to use for OpenAI-compatible endpoints.',
  },
  AUDIO_STT_OPENAI_API_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the OpenAI-compatible base URL to use for Speech-to-Text.',
  },
  AUDIO_STT_OPENAI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the OpenAI API key to use for Speech-to-Text.',
  },
  AUDIO_STT_AZURE_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the Azure API key to use for Speech-to-Text.',
  },
  AUDIO_STT_AZURE_REGION: {
    autoComplete: 'off',
    description: 'Specifies the Azure region to use for Speech-to-Text.',
  },
  AUDIO_STT_AZURE_LOCALES: {
    autoComplete: 'off',
    description: 'Specifies the locales to use for Azure Speech-to-Text.',
  },
  DEEPGRAM_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Specifies the Deepgram API key to use for Speech-to-Text.',
  },
  AUDIO_TTS_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for Text-to-Speech.',
  },
  AUDIO_TTS_ENGINE: {
    options: [
      {
        value: 'azure',
        label: 'Azure',
      },
      {
        value: 'elevenlabs',
        label: 'Elevenlabs',
      },
      {
        value: 'openai',
        label: 'Openai',
      },
      {
        value: 'transformers',
        label: 'Transformers',
      },
    ],
    description:
      'Specifies the Text-to-Speech engine to use.\n\nOptions:\n  - `azure` - Uses Azure engine for Text-to-Speech.\n  - `elevenlabs` - Uses ElevenLabs engine for Text-to-Speech\n  - `openai` - Uses OpenAI engine for Text-to-Speech.\n  - `transformers` - Uses SentenceTransformers for Text-to-Speech.\n',
  },
  AUDIO_TTS_MODEL: {
    autoComplete: 'off',
    description: 'Specifies the OpenAI text-to-speech model to use.',
  },
  AUDIO_TTS_VOICE: {
    autoComplete: 'off',
    description: 'Sets the OpenAI text-to-speech voice to use.',
  },
  AUDIO_TTS_SPLIT_ON: {
    autoComplete: 'off',
    description: 'Sets the OpenAI text-to-speech split on to use.',
  },
  AUDIO_TTS_AZURE_SPEECH_REGION: {
    autoComplete: 'off',
    description: 'Sets the region for Azure Text to Speech.',
  },
  AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT: {
    autoComplete: 'off',
    description: 'Sets the output format for Azure Text to Speech.',
  },
  AUDIO_TTS_OPENAI_API_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the OpenAI-compatible base URL to use for text-to-speech.',
  },
  AUDIO_TTS_OPENAI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key to use for text-to-speech.',
  },
  IMAGE_GENERATION_ENGINE: {
    options: [
      {
        value: 'openai',
        label: 'Openai',
      },
      {
        value: 'comfyui',
        label: 'Comfyui',
      },
      {
        value: 'automatic1111',
        label: 'Automatic1111',
      },
      {
        value: 'gemini',
        label: 'Gemini',
      },
    ],
    description:
      'Specifies the engine to use for image generation.\n\nOptions:\n  - `openai` - Uses OpenAI DALL-E for image generation.\n  - `comfyui` - Uses ComfyUI engine for image generation.\n  - `automatic1111` - Uses AUTOMATIC1111 engine for image generation.\n  - `gemini` - Uses Gemini for image generation.\n',
  },
  ENABLE_IMAGE_GENERATION: {
    description: 'Enables or disables image generation features.',
  },
  ENABLE_IMAGE_PROMPT_GENERATION: {
    description: 'Enables or disables image prompt generation.',
  },
  IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Specifies the template to use for generating image prompts.',
  },
  IMAGE_SIZE: {
    autoComplete: 'off',
    description: 'Sets the default image size to generate.',
  },
  IMAGE_STEPS: {
    autoComplete: 'off',
    description:
      'Sets the default iteration steps for image generation. Used for ComfyUI and AUTOMATIC1111.',
  },
  IMAGE_GENERATION_MODEL: {
    autoComplete: 'off',
    description: 'Default model to use for image generation',
  },
  AUTOMATIC1111_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: "Specifies the URL to AUTOMATIC1111's Stable Diffusion API.",
  },
  AUTOMATIC1111_API_AUTH: {
    autoComplete: 'off',
    description: 'Sets the AUTOMATIC1111 API authentication.',
  },
  AUTOMATIC1111_CFG_SCALE: {
    autoComplete: 'off',
    description: 'Sets the scale for AUTOMATIC1111 inference.',
  },
  AUTOMATIC1111_SAMPLER: {
    autoComplete: 'off',
    description: 'Sets the sampler for AUTOMATIC1111 inference.',
  },
  AUTOMATIC1111_SCHEDULER: {
    autoComplete: 'off',
    description: 'Sets the scheduler for AUTOMATIC1111 inference.',
  },
  COMFYUI_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Specifies the URL to the ComfyUI image generation API.',
  },
  COMFYUI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key for ComfyUI.',
  },
  COMFYUI_WORKFLOW: {
    autoComplete: 'off',
    description: 'Sets the ComfyUI workflow.',
  },
  GEMINI_API_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: "Specifies the URL to Gemini's API.",
  },
  GEMINI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the Gemini API key.',
  },
  IMAGES_GEMINI_API_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: "Specifies the URL to Gemini's image generation API.",
  },
  IMAGES_GEMINI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the Gemini API key for image generation.',
  },
  IMAGES_OPENAI_API_BASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the OpenAI-compatible base URL to use for DALL-E image generation.',
  },
  IMAGES_OPENAI_API_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the API key to use for DALL-E image generation.',
  },
  ENABLE_OAUTH_SIGNUP: {
    description:
      'Enables account creation when signing up via OAuth. Distinct from `ENABLE_SIGNUP`.',
  },
  OAUTH_MERGE_ACCOUNTS_BY_EMAIL: {
    description: 'If enabled, merges OAuth accounts with existing accounts using the same email',
  },
  OAUTH_UPDATE_PICTURE_ON_LOGIN: {
    description:
      'If enabled, updates the local user profile picture with the OAuth-provided picture on login.',
  },
  WEBUI_AUTH_TRUSTED_EMAIL_HEADER: {
    autoComplete: 'off',
    description:
      'Defines the trusted request header for authentication. See [SSO docs](/features/sso).',
  },
  WEBUI_AUTH_TRUSTED_NAME_HEADER: {
    autoComplete: 'off',
    description:
      'Defines the trusted request header for the username of anyone registering with the',
  },
  GOOGLE_CLIENT_ID: {
    autoComplete: 'off',
    description: 'Sets the client ID for Google OAuth.',
  },
  GOOGLE_CLIENT_SECRET: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the client secret for Google OAuth.',
  },
  GOOGLE_OAUTH_SCOPE: {
    autoComplete: 'off',
    description: 'Sets the scope for Google OAuth authentication.',
  },
  GOOGLE_REDIRECT_URI: {
    autoComplete: 'off',
    description: 'Sets the redirect URI for Google OAuth.',
  },
  MICROSOFT_CLIENT_ID: {
    autoComplete: 'off',
    description: 'Sets the client ID for Microsoft OAuth.',
  },
  MICROSOFT_CLIENT_SECRET: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the client secret for Microsoft OAuth.',
  },
  MICROSOFT_CLIENT_TENANT_ID: {
    autoComplete: 'off',
    description: 'Sets the tenant ID for Microsoft OAuth.',
  },
  MICROSOFT_OAUTH_SCOPE: {
    autoComplete: 'off',
    description: 'Sets the scope for Microsoft OAuth authentication.',
  },
  MICROSOFT_REDIRECT_URI: {
    autoComplete: 'off',
    description: 'Sets the redirect URI for Microsoft OAuth.',
  },
  GITHUB_CLIENT_ID: {
    autoComplete: 'off',
    description: 'Sets the client ID for GitHub OAuth.',
  },
  GITHUB_CLIENT_SECRET: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the client secret for GitHub OAuth.',
  },
  GITHUB_CLIENT_SCOPE: {
    autoComplete: 'off',
    description: 'Specifies the scope for GitHub OAuth authentication.',
  },
  GITHUB_CLIENT_REDIRECT_URI: {
    autoComplete: 'off',
    description: 'Sets the redirect URI for GitHub OAuth.',
  },
  OAUTH_CLIENT_ID: {
    autoComplete: 'off',
    description: 'Sets the client ID for OIDC.',
  },
  OAUTH_CLIENT_SECRET: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the client secret for OIDC.',
  },
  OPENID_PROVIDER_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Path to the `.well-known/openid-configuration` endpoint',
  },
  OPENID_REDIRECT_URI: {
    autoComplete: 'off',
    description: 'Sets the redirect URI for OIDC',
  },
  OAUTH_SCOPES: {
    autoComplete: 'off',
    description: 'Sets the scope for OIDC authentication. `openid` and `email` are required.',
  },
  OAUTH_CODE_CHALLENGE_METHOD: {
    autoComplete: 'off',
    description: 'Specifies the code challenge method for OAuth authentication.',
  },
  OAUTH_PROVIDER_NAME: {
    autoComplete: 'off',
    description: 'Sets the name for the OIDC provider.',
  },
  OAUTH_USERNAME_CLAIM: {
    autoComplete: 'off',
    description: 'Set username claim for OpenID.',
  },
  OAUTH_EMAIL_CLAIM: {
    autoComplete: 'off',
    description: 'Set email claim for OpenID.',
  },
  OAUTH_PICTURE_CLAIM: {
    autoComplete: 'off',
    description: 'Set picture (avatar) claim for OpenID.',
  },
  OAUTH_GROUP_CLAIM: {
    autoComplete: 'off',
    description: 'Specifies the group claim for OAuth authentication.',
  },
  ENABLE_OAUTH_ROLE_MANAGEMENT: {
    description: 'Enables role management for OAuth delegation.',
  },
  ENABLE_OAUTH_GROUP_MANAGEMENT: {
    description: 'Enables or disables OAuth group management.',
  },
  OAUTH_ROLES_CLAIM: {
    autoComplete: 'off',
    description: 'Sets the roles claim to look for in the OIDC token.',
  },
  OAUTH_ALLOWED_ROLES: {
    autoComplete: 'off',
    description: 'Sets the roles that are allowed access to the platform.',
  },
  OAUTH_ADMIN_ROLES: {
    autoComplete: 'off',
    description: 'Sets the roles that are considered administrators.',
  },
  OAUTH_ALLOWED_DOMAINS: {
    autoComplete: 'off',
    description:
      'Specifies the allowed domains for OAuth authentication. (e.g. "example1.com,example2.com").',
  },
  ENABLE_LDAP: {
    description: 'Enables or disables LDAP authentication.',
  },
  LDAP_SERVER_LABEL: {
    autoComplete: 'off',
    description: 'Sets the label of the LDAP server.',
  },
  LDAP_SERVER_HOST: {
    autoComplete: 'off',
    description: 'Sets the hostname of the LDAP server.',
  },
  LDAP_SERVER_PORT: {
    autoComplete: 'off',
    description: 'Sets the port number of the LDAP server.',
  },
  LDAP_ATTRIBUTE_FOR_MAIL: {
    autoComplete: 'off',
    description: 'Sets the attribute to use as mail for LDAP authentication.',
  },
  LDAP_ATTRIBUTE_FOR_USERNAME: {
    autoComplete: 'off',
    description: 'Sets the attribute to use as a username for LDAP authentication.',
  },
  LDAP_APP_DN: {
    autoComplete: 'off',
    description: 'Sets the distinguished name for the LDAP application.',
  },
  LDAP_APP_PASSWORD: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the password for the LDAP application.',
  },
  LDAP_SEARCH_BASE: {
    autoComplete: 'off',
    description: 'Sets the base to search for LDAP authentication.',
  },
  LDAP_SEARCH_FILTER: {
    autoComplete: 'off',
    description:
      'Sets a single filter to use for LDAP search. Alternative to `LDAP_SEARCH_FILTERS`.',
  },
  LDAP_SEARCH_FILTERS: {
    autoComplete: 'off',
    description: 'Sets the filter to use for LDAP search.',
  },
  LDAP_USE_TLS: {
    description: 'Enables or disables TLS for LDAP connection.',
  },
  LDAP_CA_CERT_FILE: {
    autoComplete: 'off',
    description: 'Sets the path to the LDAP CA certificate file.',
  },
  LDAP_VALIDATE_CERT: {
    description: 'Sets whether to validate the LDAP CA certificate.',
  },
  LDAP_CIPHERS: {
    autoComplete: 'off',
    description: 'Sets the ciphers to use for LDAP connection.',
  },
  USER_PERMISSIONS_CHAT_CONTROLS: {
    description: 'Enables or disables user permission to access chat controls.',
  },
  USER_PERMISSIONS_CHAT_FILE_UPLOAD: {
    description: 'Enables or disables user permission to upload files to chats.',
  },
  USER_PERMISSIONS_CHAT_DELETE: {
    description: 'Enables or disables user permission to delete chats.',
  },
  USER_PERMISSIONS_CHAT_EDIT: {
    description: 'Enables or disables user permission to edit chats.',
  },
  USER_PERMISSIONS_CHAT_STT: {
    description: 'Enables or disables user permission to use Speech-to-Text in chats.',
  },
  USER_PERMISSIONS_CHAT_TTS: {
    description: 'Enables or disables user permission to use Text-to-Speech in chats.',
  },
  USER_PERMISSIONS_CHAT_CALL: {
    autoComplete: 'off',
    description: 'Enables or disables user permission to make calls in chats.',
  },
  USER_PERMISSIONS_CHAT_MULTIPLE_MODELS: {
    autoComplete: 'off',
    description: 'Enables or disables user permission to use multiple models in chats.',
  },
  USER_PERMISSIONS_CHAT_TEMPORARY: {
    description: 'Enables or disables user permission to create temporary chats.',
  },
  USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED: {
    autoComplete: 'off',
    description: 'Enables or disables enforced temporary chats for users.',
  },
  USER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS: {
    autoComplete: 'off',
    description: 'Enables or disables user permission to access direct tool servers.',
  },
  USER_PERMISSIONS_FEATURES_WEB_SEARCH: {
    autoComplete: 'off',
    description: 'Enables or disables user permission to use the web search feature.',
  },
  USER_PERMISSIONS_FEATURES_IMAGE_GENERATION: {
    autoComplete: 'off',
    description: 'Enables or disables user permission to use the image generation feature.',
  },
  USER_PERMISSIONS_FEATURES_CODE_INTERPRETER: {
    autoComplete: 'off',
    description: 'Enables or disables user permission to use code interpreter feature.',
  },
  USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS: {
    description: 'Enables or disables user permission to access workspace models.',
  },
  USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS: {
    description: 'Enables or disables user permission to access workspace knowledge.',
  },
  USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Enables or disables user permission to access workspace prompts.',
  },
  USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS: {
    description: 'Enables or disables user permission to access workspace tools.',
  },
  USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING: {
    autoComplete: 'off',
    description: 'Enables or disables public sharing of workspace models.',
  },
  USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING: {
    autoComplete: 'off',
    description: 'Enables or disables public sharing of workspace knowledge.',
  },
  USER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING: {
    rows: 4,
    placeholder: 'Enter template content with placeholders...',
    description: 'Enables or disables public sharing of workspace prompts.',
  },
  USER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING: {
    autoComplete: 'off',
    description: 'Enables or disables public sharing of workspace tools.',
  },
  STORAGE_PROVIDER: {
    options: [
      {
        value: 's3',
        label: 'S3',
      },
      {
        value: 'gcs',
        label: 'Gcs',
      },
      {
        value: 'azure',
        label: 'Azure',
      },
    ],
    description:
      'Sets the storage provider.\n\nOptions:\n  - `s3` - uses the S3 client library and related environment variables mentioned in [Amazon S3 Storage](#amazon-s3-storage)\n  - `gcs` - uses the GCS client library and related environment variables mentioned in [Google Cloud Storage](#google-cloud-storage)\n  - `azure` - uses the Azure client library and related environment variables mentioned in [Microsoft Azure Storage](#microsoft-azure-storage)\n',
  },
  S3_ACCESS_KEY_ID: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the access key ID for S3 storage.',
  },
  S3_ADDRESSING_STYLE: {
    autoComplete: 'off',
    description: "Specifies the addressing style to use for S3 storage (e.g., 'path', 'virtual').",
  },
  S3_BUCKET_NAME: {
    autoComplete: 'off',
    description: 'Sets the bucket name for S3 storage.',
  },
  S3_ENDPOINT_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the endpoint URL for S3 storage.',
  },
  S3_KEY_PREFIX: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the key prefix for a S3 object.',
  },
  S3_REGION_NAME: {
    autoComplete: 'off',
    description: 'Sets the region name for S3 storage.',
  },
  S3_SECRET_ACCESS_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Sets the secret access key for S3 storage.',
  },
  S3_USE_ACCELERATE_ENDPOINT: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Specifies whether to use the accelerated endpoint for S3 storage.',
  },
  S3_ENABLE_TAGGING: {
    autoComplete: 'off',
    description:
      'Enables S3 object tagging after uploads for better organization, searching, and integration with file management policies. Always set to `False` when using Cloudflare R2, as R2 does not support object tagging.',
  },
  GOOGLE_APPLICATION_CREDENTIALS_JSON: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Contents of Google Application Credentials JSON file.',
  },
  GCS_BUCKET_NAME: {
    autoComplete: 'off',
    description: 'Sets the bucket name for Google Cloud Storage. Bucket must already exist.',
  },
  AZURE_STORAGE_ENDPOINT: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Sets the endpoint URL for Azure Storage.',
  },
  AZURE_STORAGE_CONTAINER_NAME: {
    autoComplete: 'off',
    description: 'Sets the container name for Azure Storage.',
  },
  AZURE_STORAGE_KEY: {
    autoComplete: 'new-password',
    type: 'password',
    description: 'Set the access key for Azure Storage.',
  },
  DATABASE_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Specifies the database URL to connect to.',
  },
  DATABASE_SCHEMA: {
    autoComplete: 'off',
    description: 'Specifies the database schema to connect to.',
  },
  DATABASE_POOL_SIZE: {
    autoComplete: 'off',
    description: 'Specifies the size of the database pool. A value of `0` disables pooling.',
  },
  DATABASE_POOL_MAX_OVERFLOW: {
    autoComplete: 'off',
    description: 'Specifies the database pool max overflow.',
  },
  DATABASE_POOL_TIMEOUT: {
    autoComplete: 'off',
    description: 'Specifies the database pool timeout in seconds to get a connection.',
  },
  DATABASE_POOL_RECYCLE: {
    autoComplete: 'off',
    description: 'Specifies the database pool recycle time in seconds.',
  },
  REDIS_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description: 'Specifies the URL of the Redis instance for the app-state.',
  },
  REDIS_SENTINEL_HOSTS: {
    autoComplete: 'off',
    description:
      'Comma-separated list of Redis Sentinels for app state. If specified, the "hostname" in `REDIS_URL` will be interpreted as the Sentinel service name.',
  },
  REDIS_SENTINEL_PORT: {
    autoComplete: 'off',
    description: 'Sentinel port for app state Redis.',
  },
  ENABLE_WEBSOCKET_SUPPORT: {
    description: 'Enables websocket support in Open WebUI.',
  },
  WEBSOCKET_MANAGER: {
    autoComplete: 'off',
    description: 'Specifies the websocket manager to use (in this case, Redis).',
  },
  WEBSOCKET_REDIS_URL: {
    type: 'url',
    placeholder: 'https://example.com',
    description:
      'Specifies the URL of the Redis instance for websocket communication. It is distinct from `REDIS_URL` and in practice, it is recommended to set both.',
  },
  WEBSOCKET_SENTINEL_HOSTS: {
    autoComplete: 'off',
    description:
      'Comma-separated list of Redis Sentinels for websocket. If specified, the "hostname" in `WEBSOCKET_REDIS_URL` will be interpreted as the Sentinel service name.',
  },
  WEBSOCKET_SENTINEL_PORT: {
    autoComplete: 'off',
    description: 'Sentinel port for websocket Redis.',
  },
  UVICORN_WORKERS: {
    autoComplete: 'off',
    description:
      'Controls the number of worker processes that Uvicorn spawns to handle requests. Each worker runs its own instance of the application in a separate process.',
  },
  PIP_OPTIONS: {
    autoComplete: 'off',
    description:
      'Specifies additional command-line options that pip should use when installing packages. For example, you can include flags such as `--upgrade`, `--user`, or `--no-cache-dir` to control the installation process.',
  },
  PIP_PACKAGE_INDEX_OPTIONS: {
    autoComplete: 'off',
    description:
      'Defines custom package index behavior for pip. This can include specifying additional or alternate index URLs (e.g., `--extra-index-url`), authentication credentials, or other parameters to manage how packages are retrieved from different locations.',
  },
} as const;

// Wrapper Components Registry - Wrapper requirements for each field
export const fieldWrappers: Record<string, string[]> = {
  LICENSE_KEY: ['plan-restricted-feature'],
  OPENAI_API_KEY: ['plan-restricted-feature'],
  OPENAI_API_KEYS: ['plan-restricted-feature'],
  CODE_EXECUTION_JUPYTER_AUTH_TOKEN: ['plan-restricted-feature'],
  CODE_EXECUTION_JUPYTER_AUTH_PASSWORD: ['plan-restricted-feature'],
  CODE_INTERPRETER_JUPYTER_AUTH_TOKEN: ['plan-restricted-feature'],
  CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD: ['plan-restricted-feature'],
  ENABLE_API_KEY: ['plan-restricted-feature'],
  ENABLE_API_KEY_ENDPOINT_RESTRICTIONS: ['plan-restricted-feature'],
  API_KEY_ALLOWED_ENDPOINTS: ['plan-restricted-feature'],
  WEBUI_SECRET_KEY: ['plan-restricted-feature'],
  CHROMA_CLIENT_AUTH_CREDENTIALS: ['plan-restricted-feature'],
  ELASTICSEARCH_API_KEY: ['plan-restricted-feature'],
  ELASTICSEARCH_PASSWORD: ['plan-restricted-feature'],
  MILVUS_TOKEN: ['plan-restricted-feature'],
  OPENSEARCH_PASSWORD: ['plan-restricted-feature'],
  QDRANT_API_KEY: ['plan-restricted-feature'],
  PINECONE_API_KEY: ['plan-restricted-feature'],
  MISTRAL_OCR_API_KEY: ['plan-restricted-feature'],
  EXTERNAL_DOCUMENT_LOADER_API_KEY: ['plan-restricted-feature'],
  TIKTOKEN_CACHE_DIR: ['plan-restricted-feature'],
  TIKTOKEN_ENCODING_NAME: ['plan-restricted-feature'],
  RAG_OPENAI_API_KEY: ['plan-restricted-feature'],
  RAG_OLLAMA_API_KEY: ['plan-restricted-feature'],
  DOCUMENT_INTELLIGENCE_KEY: ['plan-restricted-feature'],
  GOOGLE_DRIVE_API_KEY: ['plan-restricted-feature'],
  GOOGLE_PSE_API_KEY: ['plan-restricted-feature'],
  BRAVE_SEARCH_API_KEY: ['plan-restricted-feature'],
  KAGI_SEARCH_API_KEY: ['plan-restricted-feature'],
  MOJEEK_SEARCH_API_KEY: ['plan-restricted-feature'],
  SERPSTACK_API_KEY: ['plan-restricted-feature'],
  SERPER_API_KEY: ['plan-restricted-feature'],
  SERPLY_API_KEY: ['plan-restricted-feature'],
  SEARCHAPI_API_KEY: ['plan-restricted-feature'],
  TAVILY_API_KEY: ['plan-restricted-feature'],
  JINA_API_KEY: ['plan-restricted-feature'],
  BING_SEARCH_V7_SUBSCRIPTION_KEY: ['plan-restricted-feature'],
  BOCHA_SEARCH_API_KEY: ['plan-restricted-feature'],
  EXA_API_KEY: ['plan-restricted-feature'],
  SERPAPI_API_KEY: ['plan-restricted-feature'],
  FIRECRAWL_API_KEY: ['plan-restricted-feature'],
  PERPLEXITY_API_KEY: ['plan-restricted-feature'],
  AUDIO_STT_OPENAI_API_KEY: ['plan-restricted-feature'],
  AUDIO_STT_AZURE_API_KEY: ['plan-restricted-feature'],
  DEEPGRAM_API_KEY: ['plan-restricted-feature'],
  AUDIO_TTS_API_KEY: ['plan-restricted-feature'],
  AUDIO_TTS_OPENAI_API_KEY: ['plan-restricted-feature'],
  COMFYUI_API_KEY: ['plan-restricted-feature'],
  GEMINI_API_KEY: ['plan-restricted-feature'],
  IMAGES_GEMINI_API_KEY: ['plan-restricted-feature'],
  IMAGES_OPENAI_API_KEY: ['plan-restricted-feature'],
  GOOGLE_CLIENT_SECRET: ['plan-restricted-feature'],
  MICROSOFT_CLIENT_SECRET: ['plan-restricted-feature'],
  GITHUB_CLIENT_SECRET: ['plan-restricted-feature'],
  OAUTH_CLIENT_SECRET: ['plan-restricted-feature'],
  LDAP_APP_PASSWORD: ['plan-restricted-feature'],
  S3_ACCESS_KEY_ID: ['plan-restricted-feature'],
  S3_KEY_PREFIX: ['plan-restricted-feature'],
  S3_SECRET_ACCESS_KEY: ['plan-restricted-feature'],
  GOOGLE_APPLICATION_CREDENTIALS_JSON: ['plan-restricted-feature'],
  AZURE_STORAGE_KEY: ['plan-restricted-feature'],
} as const;

// Integration Metadata - Information for framework compatibility
export const integrationMetadata: IntegrationMetadata = {
  reactTsForm: {
    compatible: true,
    totalFields: 370,
    mappedFields: 370,
    conditionalFields: 0,
  },
  componentLibrary: {
    name: 'shadcn/ui',
    components: [
      'url-input',
      'toggle-field',
      'text-field',
      'array-field',
      'select-field',
      'secret-field',
      'markdown-text-area',
    ],
    wrappers: ['plan-restricted-feature'],
  },
  statistics: {
    totalFields: 370,
    componentTypes: 7,
    ruleBasedAssignments: 370,
    coverage: 100,
  },
} as const;

// Utility Functions - Convenient access to component mappings

/**
 * Get the component name for a specific field
 * @param fieldName - Name of the configuration field
 * @returns Component name or 'text-field' as default
 */
export function getComponentForField(fieldName: string): AvailableComponent {
  const mapping = componentMappings[fieldName];
  return (mapping?.component as AvailableComponent) || 'text-field';
}

/**
 * Get the component props for a specific field
 * @param fieldName - Name of the configuration field
 * @returns Props object for the component
 */
export function getComponentProps(fieldName: string): ComponentProps {
  return componentProps[fieldName] || {};
}

/**
 * Get the wrapper components for a specific field
 * @param fieldName - Name of the configuration field
 * @returns Array of wrapper component names
 */
export function getFieldWrappers(fieldName: string): AvailableWrapper[] {
  return (fieldWrappers[fieldName] as AvailableWrapper[]) || [];
}

/**
 * Get alternative components for a specific field
 * @param fieldName - Name of the configuration field
 * @returns Array of alternative component names
 */
export function getAlternativeComponents(fieldName: string): AvailableComponent[] {
  const mapping = componentMappings[fieldName];
  return (mapping?.alternatives as AvailableComponent[]) || [];
}

/**
 * Check if a field requires conditional rendering
 * @param fieldName - Name of the configuration field
 * @returns True if the field has conditional logic
 */
export function isConditionalField(fieldName: string): boolean {
  const props = getComponentProps(fieldName);
  return Boolean(props.conditional);
}

/**
 * Check if a field requires premium access (plan-restricted)
 * @param fieldName - Name of the configuration field
 * @returns True if the field requires premium access
 */
export function isPremiumField(fieldName: string): boolean {
  const wrappers = getFieldWrappers(fieldName);
  return wrappers.includes('plan-restricted-feature');
}

/**
 * Get all fields using a specific component
 * @param componentName - Name of the component to search for
 * @returns Array of field names using this component
 */
export function getFieldsUsingComponent(componentName: string): string[] {
  return Object.keys(componentMappings).filter(fieldName => {
    return componentMappings[fieldName].component === componentName;
  });
}

/**
 * Get component usage statistics
 * @returns Object with component usage counts
 */
export function getComponentUsageStats(): Record<string, number> {
  const usage: Record<string, number> = {};

  Object.values(componentMappings).forEach(mapping => {
    const component = mapping.component;
    usage[component] = (usage[component] || 0) + 1;
  });

  return usage;
}

/**
 * Get fields by category (if category information is available)
 * @param categoryName - Name of the category
 * @returns Array of field names in this category
 */
export function getFieldsByCategory(categoryName: string): string[] {
  // Note: This would require category information from uiSchema
  // For now, return empty array - can be enhanced when category data is needed
  return [];
}

/**
 * Validate that a component mapping exists for a field
 * @param fieldName - Name of the configuration field
 * @returns True if mapping exists, false otherwise
 */
export function hasComponentMapping(fieldName: string): boolean {
  return Boolean(componentMappings[fieldName]);
}

/**
 * Get the decision path for how a component was selected
 * @param fieldName - Name of the configuration field
 * @returns Array of decision steps or empty array if no mapping
 */
export function getComponentDecisionPath(fieldName: string): string[] {
  const mapping = componentMappings[fieldName];
  return mapping?.decisionPath || [];
}

/**
 * Get human-readable explanation for component choice
 * @param fieldName - Name of the configuration field
 * @returns Explanation string or empty string if no mapping
 */
export function getComponentDecisionReason(fieldName: string): string {
  const mapping = componentMappings[fieldName];
  return mapping?.decisionReason || '';
}

/**
 * Create a component configuration object for react-ts-form
 * @param fieldName - Name of the configuration field
 * @returns Configuration object ready for react-ts-form
 */
export function createReactTsFormConfig(fieldName: string) {
  const component = getComponentForField(fieldName);
  const props = getComponentProps(fieldName);
  const wrappers = getFieldWrappers(fieldName);

  return {
    component,
    props,
    wrappers,
    // Add any additional react-ts-form specific configuration here
  };
}

/**
 * Validate all component mappings
 * @returns Validation result with any issues found
 */
export function validateComponentMappings(): { valid: boolean; issues: string[] } {
  const issues: string[] = [];

  // Check for missing mappings
  // This would require knowledge of all expected fields from the schema

  // Check for invalid component references
  const validComponents: AvailableComponent[] = [
    'text-field',
    'secret-field',
    'select-field',
    'toggle-field',
    'url-input',
    'array-field',
    'markdown-text-area',
  ];

  Object.entries(componentMappings).forEach(([fieldName, mapping]) => {
    if (!validComponents.includes(mapping.component as AvailableComponent)) {
      issues.push(`Field '${fieldName}' has invalid component '${mapping.component}'`);
    }
  });

  return {
    valid: issues.length === 0,
    issues,
  };
}

// Main Export - Complete component mapping system
export const openWebUIComponentMappings: OpenWebUIComponentMappings = {
  mappings: componentMappings,
  props: componentProps,
  wrappers: fieldWrappers,
  integration: integrationMetadata,
  metadata: {
    generatedAt: '2025-05-25T09:27:24.637Z',
    totalFields: 370,
    version: '1.0.0',
  },
} as const;

// Default export for convenience
export default openWebUIComponentMappings;

// Re-export component mappings as the most commonly used export
export { componentMappings as default } from './generated-component-mapping';
