{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://schemas.openwebui.com/config/v1",
  "title": "OpenWebUI Configuration Schema",
  "description": "Complete configuration schema for OpenWebUI deployment",
  "type": "object",
  "properties": {
    "app": {
      "type": "object",
      "title": "App",
      "properties": {
        "backend_general": {
          "type": "object",
          "title": "Backend General",
          "properties": {
            "DEFAULT_LOCALE": {
              "type": "string",
              "description": "Sets the default locale for the application.",
              "default": "en"
            },
            "DEFAULT_MODELS": {
              "type": "string",
              "description": "Sets a default Language Model.",
              "default": "Empty string (' '), since"
            },
            "ENABLE_CHANNELS": {
              "type": "boolean",
              "description": "Enables or disables channel support.",
              "default": false
            },
            "WEBHOOK_URL": {
              "type": "string",
              "description": "Sets a webhook for integration with Discord/Slack/Microsoft Teams."
            },
            "RESPONSE_WATERMARK": {
              "type": "string",
              "description": "Sets a custom text that will be included when you copy a message in the chat. E.g. `\"This text is AI generated\"` -> will add \"This text is AI generated\" to every message, when copied.",
              "default": "Empty string (' ')"
            },
            "THREAD_POOL_SIZE": {
              "type": "integer",
              "description": "Sets the thread pool size for FastAPI/AnyIO blocking calls. By default (when set to 0) FastAPI/AnyIO use `40` threads. In case of large instances and many concurrent users, it may be needed to increase `THREAD_POOL_SIZE` to prevent blocking.",
              "default": 0
            },
            "CUSTOM_NAME": {
              "type": "string",
              "description": "Sets `WEBUI_NAME` but polls **api.openwebui.com** for metadata.",
              "default": "Leger OWUI"
            },
            "WEBUI_NAME": {
              "type": "string",
              "description": "Sets the main WebUI name. Appends `(Open WebUI)` if overridden.",
              "default": "Open WebUI"
            },
            "ENABLE_REALTIME_CHAT_SAVE": {
              "type": "boolean",
              "description": "When enabled, the system saves each chunk of streamed chat data to the database in real time to ensure maximum data persistency. This feature provides robust data recovery and allows accurate session tracking. However, the tradeoff is increased latency, as saving to the database introduces a delay. Disabling this feature can improve performance and reduce delays, but it risks potential data loss in the event of a system failure or crash. Use based on your application's requirements and acceptable tradeoffs.",
              "default": false
            },
            "BYPASS_MODEL_ACCESS_CONTROL": {
              "type": "boolean",
              "description": "Bypasses model access control.",
              "default": false
            },
            "WEBUI_BANNERS": {
              "type": "array",
              "description": "List of banners to show to users. The format for banners are:",
              "default": []
            },
            "ENABLE_TITLE_GENERATION": {
              "type": "boolean",
              "description": "Enables or disables chat title generation.",
              "default": true
            },
            "DEFAULT_PROMPT_SUGGESTIONS": {
              "type": "array",
              "description": "List of prompt suggestions. The format for prompt suggestions are:",
              "default": []
            }
          }
        },
        "backend_aiohttp_client": {
          "type": "object",
          "title": "Backend Aiohttp Client",
          "properties": {
            "AIOHTTP_CLIENT_TIMEOUT": {
              "type": "integer",
              "description": "Specifies the timeout duration in seconds for the AIOHTTP client. This impacts things",
              "default": 300
            },
            "AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST": {
              "type": "integer",
              "description": "Sets the timeout in seconds for fetching the model list. This can be useful in cases where network latency requires a longer timeout duration to successfully retrieve the model list.",
              "default": 10
            },
            "AIOHTTP_CLIENT_TIMEOUT_OPENAI_MODEL_LIST": {
              "type": "integer",
              "description": "Sets the timeout in seconds for fetching the model list. This can be useful in cases where network latency requires a longer timeout duration to successfully retrieve the model list."
            }
          }
        },
        "backend_directories": {
          "type": "object",
          "title": "Backend Directories",
          "properties": {
            "FONTS_DIR": {
              "type": "string",
              "description": "Specifies the directory for fonts."
            }
          }
        },
        "backend_ollama": {
          "type": "object",
          "title": "Backend Ollama",
          "properties": {
            "ENABLE_OLLAMA_API": {
              "type": "boolean",
              "description": "Enables the use of Ollama APIs.",
              "default": true
            },
            "OLLAMA_BASE_URLS": {
              "type": "string",
              "description": "Configures load-balanced Ollama backend hosts, separated by `;`. See"
            }
          }
        },
        "backend_openai": {
          "type": "object",
          "title": "Backend Openai",
          "properties": {
            "ENABLE_OPENAI_API": {
              "type": "boolean",
              "description": "Enables the use of OpenAI APIs.",
              "default": true
            },
            "OPENAI_API_BASE_URL": {
              "type": "string",
              "description": "Configures the OpenAI base API URL.",
              "default": "https://api.openai.com/v1"
            },
            "OPENAI_API_BASE_URLS": {
              "type": "string",
              "description": "Supports balanced OpenAI base API URLs, semicolon-separated."
            },
            "OPENAI_API_KEY": {
              "type": "string",
              "description": "Sets the OpenAI API key.",
              "format": "password"
            },
            "OPENAI_API_KEYS": {
              "type": "string",
              "description": "Supports multiple OpenAI API keys, semicolon-separated.",
              "format": "password"
            }
          }
        },
        "backend_tasks": {
          "type": "object",
          "title": "Backend Tasks",
          "properties": {
            "TASK_MODEL": {
              "type": "string",
              "description": "The default model to use for tasks such as title and web search query generation"
            },
            "TASK_MODEL_EXTERNAL": {
              "type": "string",
              "description": "The default model to use for tasks such as title and web search query generation"
            },
            "TITLE_GENERATION_PROMPT_TEMPLATE": {
              "type": "string",
              "description": "Prompt to use when generating chat titles."
            },
            "TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE": {
              "type": "string",
              "description": "Prompt to use when calling tools."
            }
          }
        },
        "backend_code_execution": {
          "type": "object",
          "title": "Backend Code Execution",
          "properties": {
            "ENABLE_CODE_EXECUTION": {
              "type": "boolean",
              "description": "Enables or disables code execution.",
              "default": true
            },
            "CODE_EXECUTION_ENGINE": {
              "type": "string",
              "description": "Specifies the code execution engine to use.",
              "default": "pyodide",
              "enum": [
                "jupyter",
                "pyodide"
              ]
            },
            "CODE_EXECUTION_JUPYTER_URL": {
              "type": "string",
              "description": "Specifies the Jupyter URL to use for code execution."
            },
            "CODE_EXECUTION_JUPYTER_AUTH": {
              "type": "string",
              "description": "Specifies the Jupyter authentication method to use for code execution."
            },
            "CODE_EXECUTION_JUPYTER_AUTH_TOKEN": {
              "type": "string",
              "description": "Specifies the Jupyter authentication token to use for code execution.",
              "format": "password"
            },
            "CODE_EXECUTION_JUPYTER_AUTH_PASSWORD": {
              "type": "string",
              "description": "Specifies the Jupyter authentication password to use for code execution.",
              "format": "password"
            },
            "CODE_EXECUTION_JUPYTER_TIMEOUT": {
              "type": "string",
              "description": "Specifies the timeout for Jupyter code execution.",
              "default": "Empty string (' '), since"
            }
          }
        },
        "backend_code_interpreter": {
          "type": "object",
          "title": "Backend Code Interpreter",
          "properties": {
            "ENABLE_CODE_INTERPRETER": {
              "type": "boolean",
              "description": "Enables or disables code interpreter.",
              "default": true
            },
            "CODE_INTERPRETER_ENGINE": {
              "type": "string",
              "description": "Specifies the code interpreter engine to use.",
              "default": "pyodide",
              "enum": [
                "jupyter",
                "pyodide"
              ]
            },
            "CODE_INTERPRETER_PROMPT_TEMPLATE": {
              "type": "string",
              "description": "Specifies the prompt template to use for code interpreter."
            },
            "CODE_INTERPRETER_JUPYTER_URL": {
              "type": "string",
              "description": "Specifies the Jupyter URL to use for code interpreter.",
              "default": "Empty string (' '), since"
            },
            "CODE_INTERPRETER_JUPYTER_AUTH": {
              "type": "string",
              "description": "Specifies the Jupyter authentication method to use for code interpreter.",
              "default": "Empty string (' '), since"
            },
            "CODE_INTERPRETER_JUPYTER_AUTH_TOKEN": {
              "type": "string",
              "description": "Specifies the Jupyter authentication token to use for code interpreter.",
              "default": "Empty string (' '), since",
              "format": "password"
            },
            "CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD": {
              "type": "string",
              "description": "Specifies the Jupyter authentication password to use for code interpreter.",
              "default": "Empty string (' '), since",
              "format": "password"
            },
            "CODE_INTERPRETER_JUPYTER_TIMEOUT": {
              "type": "string",
              "description": "Specifies the timeout for the Jupyter code interpreter.",
              "default": "Empty string (' '), since"
            }
          }
        },
        "backend_direct_connections_(openapi_mcpo_tool_servers)": {
          "type": "object",
          "title": "Backend Direct Connections (openapi Mcpo Tool Servers)",
          "properties": {
            "ENABLE_DIRECT_CONNECTIONS": {
              "type": "boolean",
              "description": "Enables or disables direct connections.",
              "default": true
            }
          }
        },
        "backend_autocomplete": {
          "type": "object",
          "title": "Backend Autocomplete",
          "properties": {
            "ENABLE_AUTOCOMPLETE_GENERATION": {
              "type": "boolean",
              "description": "Enables or disables autocomplete generation.",
              "default": true
            },
            "AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH": {
              "type": "integer",
              "description": "Sets the maximum input length for autocomplete generation.",
              "default": -1
            },
            "AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE": {
              "type": "string",
              "description": "Sets the prompt template for autocomplete generation.",
              "default": "The value of the"
            }
          }
        },
        "backend_evaluation_arena_model": {
          "type": "object",
          "title": "Backend Evaluation Arena Model",
          "properties": {
            "ENABLE_EVALUATION_ARENA_MODELS": {
              "type": "boolean",
              "description": "Enables or disables evaluation arena models.",
              "default": true
            },
            "ENABLE_MESSAGE_RATING": {
              "type": "boolean",
              "description": "Enables message rating feature.",
              "default": true
            },
            "ENABLE_COMMUNITY_SHARING": {
              "type": "boolean",
              "description": "Controls whether users are shown the share to community button.",
              "default": true
            }
          }
        },
        "backend_tags_generation": {
          "type": "object",
          "title": "Backend Tags Generation",
          "properties": {
            "ENABLE_TAGS_GENERATION": {
              "type": "boolean",
              "description": "Enables or disables tag generation.",
              "default": true
            },
            "TAGS_GENERATION_PROMPT_TEMPLATE": {
              "type": "string",
              "description": "Sets the prompt template for tag generation."
            }
          }
        }
      }
    },
    "security": {
      "type": "object",
      "title": "Security",
      "properties": {
        "variables": {
          "type": "object",
          "title": "Variables",
          "properties": {
            "ENABLE_FORWARD_USER_INFO_HEADERS": {
              "type": "string",
              "description": "Forwards user information (name, ID, email, and role) as X-headers to OpenAI API and Ollama API.",
              "default": "False"
            },
            "OFFLINE_MODE": {
              "type": "boolean",
              "description": "Enables or disables offline mode.",
              "default": false
            },
            "SAFE_MODE": {
              "type": "boolean",
              "description": "Enables safe mode, which disables potentially unsafe features, deactivating all functions.",
              "default": false
            },
            "RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE": {
              "type": "boolean",
              "description": "Determines whether to allow custom models defined on the Hub in their own modeling files.",
              "default": false
            },
            "RAG_RERANKING_MODEL_TRUST_REMOTE_CODE": {
              "type": "boolean",
              "description": "Determines whether to allow custom models defined on the Hub in their own.",
              "default": false
            },
            "RAG_EMBEDDING_MODEL_AUTO_UPDATE": {
              "type": "boolean",
              "description": "Toggles automatic update of the Sentence-Transformer model.",
              "default": true
            },
            "RAG_RERANKING_MODEL_AUTO_UPDATE": {
              "type": "boolean",
              "description": "Toggles automatic update of the reranking model.",
              "default": true
            }
          }
        }
      }
    },
    "vector": {
      "type": "object",
      "title": "Vector",
      "properties": {
        "database": {
          "type": "object",
          "title": "Database",
          "properties": {
            "VECTOR_DB": {
              "type": "string",
              "description": "Specifies which vector database system to use. This setting determines which vector storage system will be used for managing embeddings.",
              "default": "chroma",
              "enum": [
                "chroma",
                "elasticsearch",
                "milvus",
                "opensearch",
                "pgvector",
                "pinecone",
                "qdrant"
              ]
            }
          }
        },
        "database_chromadb": {
          "type": "object",
          "title": "Database Chromadb",
          "properties": {
            "CHROMA_TENANT": {
              "type": "string",
              "description": "Sets the tenant for ChromaDB to use for RAG embeddings.",
              "default": "The value of"
            },
            "CHROMA_DATABASE": {
              "type": "string",
              "description": "Sets the database in the ChromaDB tenant to use for RAG embeddings.",
              "default": "The value of"
            },
            "CHROMA_HTTP_HOST": {
              "type": "string",
              "description": "Specifies the hostname of a remote ChromaDB Server. Uses a local ChromaDB instance if not set."
            },
            "CHROMA_HTTP_PORT": {
              "type": "integer",
              "description": "Specifies the port of a remote ChromaDB Server.",
              "default": 8000
            },
            "CHROMA_HTTP_HEADERS": {
              "type": "string",
              "description": "A comma-separated list of HTTP headers to include with every ChromaDB request."
            },
            "CHROMA_HTTP_SSL": {
              "type": "boolean",
              "description": "Controls whether or not SSL is used for ChromaDB Server connections.",
              "default": false
            },
            "CHROMA_CLIENT_AUTH_PROVIDER": {
              "type": "string",
              "description": "Specifies an authentication provider for remote ChromaDB Server."
            },
            "CHROMA_CLIENT_AUTH_CREDENTIALS": {
              "type": "string",
              "description": "Specifies auth credentials for remote ChromaDB Server.",
              "format": "password"
            }
          }
        },
        "database_elasticsearch": {
          "type": "object",
          "title": "Database Elasticsearch",
          "properties": {
            "ELASTICSEARCH_API_KEY": {
              "type": "string",
              "description": "Specifies the Elasticsearch API key.",
              "default": "Empty string (' '), since",
              "format": "password"
            },
            "ELASTICSEARCH_CA_CERTS": {
              "type": "string",
              "description": "Specifies the path to the CA certificates for Elasticsearch.",
              "default": "Empty string (' '), since"
            },
            "ELASTICSEARCH_CLOUD_ID": {
              "type": "string",
              "description": "Specifies the Elasticsearch cloud ID.",
              "default": "Empty string (' '), since"
            },
            "ELASTICSEARCH_INDEX_PREFIX": {
              "type": "string",
              "description": "Specifies the prefix for the Elasticsearch index.",
              "default": "open_webui_collections"
            },
            "ELASTICSEARCH_PASSWORD": {
              "type": "string",
              "description": "Specifies the password for Elasticsearch.",
              "default": "Empty string (' '), since",
              "format": "password"
            },
            "ELASTICSEARCH_URL": {
              "type": "string",
              "description": "Specifies the URL for the Elasticsearch instance.",
              "default": "https://localhost:9200"
            },
            "ELASTICSEARCH_USERNAME": {
              "type": "string",
              "description": "Specifies the username for Elasticsearch.",
              "default": "Empty string (' '), since"
            }
          }
        },
        "database_milvus": {
          "type": "object",
          "title": "Database Milvus",
          "properties": {
            "MILVUS_URI": {
              "type": "string",
              "description": "Specifies the URI for connecting to the Milvus vector database. This can point to a local or remote Milvus server based on the deployment configuration.",
              "default": "${DATA_DIR}/vector_db/milvus.db"
            },
            "MILVUS_DB": {
              "type": "string",
              "description": "Specifies the database to connect to within a Milvus instance.",
              "default": "default"
            },
            "MILVUS_TOKEN": {
              "type": "string",
              "description": "Specifies an optional connection token for Milvus.",
              "format": "password"
            },
            "MILVUS_INDEX_TYPE": {
              "type": "string",
              "description": "Specifies the index type to use when creating a new collection in Milvus. `AUTOINDEX` is generally recommended for Milvus standalone. `HNSW` may offer better performance but typically requires a clustered Milvus setup.",
              "default": "HNSW",
              "enum": [
                "AUTOINDEX",
                "FLAT",
                "HNSW",
                "IVF_FLAT"
              ]
            },
            "MILVUS_METRIC_TYPE": {
              "type": "string",
              "description": "Specifies the metric type for vector similarity search in Milvus.",
              "default": "COSINE"
            },
            "MILVUS_HNSW_M": {
              "type": "integer",
              "description": "Specifies the `M` parameter for the HNSW index type in Milvus. This influences the number of bi-directional links created for each new element during construction. Only applicable if `MILVUS_INDEX_TYPE` is `HNSW`.",
              "default": 16
            },
            "MILVUS_HNSW_EFCONSTRUCTION": {
              "type": "integer",
              "description": "Specifies the `efConstruction` parameter for the HNSW index type in Milvus. This influences the size of the dynamic list for the nearest neighbors during index construction. Only applicable if `MILVUS_INDEX_TYPE` is `HNSW`.",
              "default": 100
            },
            "MILVUS_IVF_FLAT_NLIST": {
              "type": "integer",
              "description": "Specifies the `nlist` parameter for the IVF_FLAT index type in Milvus. This is the number of cluster units. Only applicable if `MILVUS_INDEX_TYPE` is `IVF_FLAT`.",
              "default": 128
            }
          }
        },
        "database_opensearch": {
          "type": "object",
          "title": "Database Opensearch",
          "properties": {
            "OPENSEARCH_CERT_VERIFY": {
              "type": "boolean",
              "description": "Enables or disables OpenSearch certificate verification.",
              "default": false
            },
            "OPENSEARCH_PASSWORD": {
              "type": "string",
              "description": "Sets the password for OpenSearch.",
              "format": "password"
            },
            "OPENSEARCH_SSL": {
              "type": "boolean",
              "description": "Enables or disables SSL for OpenSearch.",
              "default": true
            },
            "OPENSEARCH_URI": {
              "type": "string",
              "description": "Sets the URI for OpenSearch.",
              "default": "https://localhost:9200"
            },
            "OPENSEARCH_USERNAME": {
              "type": "string",
              "description": "Sets the username for OpenSearch."
            }
          }
        },
        "database_pgvector": {
          "type": "object",
          "title": "Database Pgvector",
          "properties": {
            "PGVECTOR_DB_URL": {
              "type": "string",
              "description": "Sets the database URL for model storage.",
              "default": "The value of the"
            },
            "PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH": {
              "type": "string",
              "description": "Specifies the maximum vector length for PGVector initialization.",
              "default": "1536"
            }
          }
        },
        "database_qdrant": {
          "type": "object",
          "title": "Database Qdrant",
          "properties": {
            "QDRANT_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Qdrant.",
              "format": "password"
            },
            "QDRANT_URI": {
              "type": "string",
              "description": "Sets the URI for Qdrant."
            },
            "QDRANT_ON_DISK": {
              "type": "boolean",
              "description": "Enable the usage of memmap(also known as on-disk) storage",
              "default": false
            },
            "QDRANT_PREFER_GRPC": {
              "type": "boolean",
              "description": "Use gPRC interface whenever possible",
              "default": false
            },
            "QDRANT_GRPC_PORT": {
              "type": "integer",
              "description": "Sets the gRPC port number for Qdrant.",
              "default": 6334
            },
            "ENABLE_QDRANT_MULTITENANCY_MODE": {
              "type": "boolean",
              "description": "Enables multitenancy pattern for Qdrant collections management, which significantly reduces RAM usage and computational overhead by consolidating similar vector data structures. Recommend turn on",
              "default": false
            }
          }
        },
        "database_pinecone": {
          "type": "object",
          "title": "Database Pinecone",
          "properties": {
            "PINECONE_API_KEY": {
              "type": "string",
              "description": "Sets the API key used to authenticate with the Pinecone service.",
              "format": "password"
            },
            "PINECONE_ENVIRONMENT": {
              "type": "string",
              "description": "Specifies the Pinecone environment to connect to (e.g., `us-west1-gcp`, `gcp-starter`, etc.)."
            },
            "PINECONE_INDEX_NAME": {
              "type": "string",
              "description": "Defines the name of the Pinecone index that will be used to store and query vector embeddings.",
              "default": "open-webui-index"
            },
            "PINECONE_DIMENSION": {
              "type": "integer",
              "description": "The dimensionality of the vector embeddings. Must match the dimension expected by the index (commonly 768, 1024, 1536, or 3072 based on model used).",
              "default": 1536
            },
            "PINECONE_METRIC": {
              "type": "string",
              "description": "Specifies the similarity metric to use for vector comparisons within the Pinecone index.",
              "default": "cosine"
            },
            "PINECONE_CLOUD": {
              "type": "string",
              "description": "Specifies the cloud provider where the Pinecone index is hosted.",
              "default": "aws"
            }
          }
        }
      }
    },
    "rag": {
      "type": "object",
      "title": "Rag",
      "properties": {
        "content_extraction_engine": {
          "type": "object",
          "title": "Content Extraction Engine",
          "properties": {
            "CONTENT_EXTRACTION_ENGINE": {
              "type": "string",
              "description": "Sets the content extraction engine to use for document ingestion.\n\nOptions:\n  - `external` - Use external loader\n  - `tika` - Use a local Apache Tika server\n  - `docling` - Use Docling engine\n  - `document_intelligence` - Use Document Intelligence engine\n  - `mistral_ocr` - Use Mistral OCR engine\n",
              "enum": [
                "external",
                "tika",
                "docling",
                "document_intelligence",
                "mistral_ocr"
              ],
              "default": "tika"
            },
            "MISTRAL_OCR_API_KEY": {
              "type": "string",
              "description": "Specifies the Mistral OCR API key to use.",
              "format": "password"
            },
            "EXTERNAL_DOCUMENT_LOADER_URL": {
              "type": "string",
              "description": "Sets the URL for the external document loader service."
            },
            "EXTERNAL_DOCUMENT_LOADER_API_KEY": {
              "type": "string",
              "description": "Sets the API key for authenticating with the external document loader service.",
              "format": "password"
            },
            "TIKA_SERVER_URL": {
              "type": "string",
              "description": "Sets the URL for the Apache Tika server.",
              "default": "http://localhost:9998"
            },
            "DOCLING_SERVER_URL": {
              "type": "string",
              "description": "Specifies the URL for the Docling server.",
              "default": "http://docling:5001"
            },
            "DOCLING_OCR_ENGINE": {
              "type": "string",
              "description": "Specifies the OCR engine used by Docling.",
              "default": "tesseract"
            },
            "DOCLING_OCR_LANG": {
              "type": "string",
              "description": "Specifies the OCR language(s) to be used with the configured `DOCLING_OCR_ENGINE`.",
              "default": "eng,fra,deu,spa"
            }
          }
        }
      }
    },
    "retrieval": {
      "type": "object",
      "title": "Retrieval",
      "properties": {
        "augmented_generation_(rag)": {
          "type": "object",
          "title": "Augmented Generation (rag)",
          "properties": {
            "RAG_EMBEDDING_ENGINE": {
              "type": "string",
              "description": "Selects an embedding engine to use for RAG.\n\nOptions:\n  - `ollama` - Uses the Ollama API for embeddings.\n  - `openai` - Uses the OpenAI API for embeddings.\n",
              "enum": [
                "ollama",
                "openai"
              ],
              "default": "SentenceTransformers"
            },
            "RAG_EMBEDDING_MODEL": {
              "type": "string",
              "description": "Sets a model for embeddings. Locally, a Sentence-Transformer model is used.",
              "default": "sentence-transformers/all-MiniLM-L6-v2"
            },
            "ENABLE_RAG_HYBRID_SEARCH": {
              "type": "boolean",
              "description": "Enables the use of ensemble search with `BM25` + `ChromaDB`, with reranking using",
              "default": false
            },
            "RAG_TOP_K": {
              "type": "integer",
              "description": "Sets the default number of results to consider for the embedding when using RAG.",
              "default": 3
            },
            "RAG_TOP_K_RERANKER": {
              "type": "integer",
              "description": "Sets the default number of results to consider for the reranker when using RAG.",
              "default": 3
            },
            "RAG_RELEVANCE_THRESHOLD": {
              "type": "number",
              "description": "Sets the relevance threshold to consider for documents when used with reranking.",
              "default": 0
            },
            "RAG_TEMPLATE": {
              "type": "string",
              "description": "Template to use when injecting RAG documents into chat completion"
            },
            "RAG_TEXT_SPLITTER": {
              "type": "string",
              "description": "Sets the text splitter for RAG models.\n\nOptions:\n  - `character` - `token`\n  - `token`\n",
              "default": "character",
              "enum": [
                "character",
                "token"
              ]
            },
            "TIKTOKEN_CACHE_DIR": {
              "type": "string",
              "description": "Sets the directory for TikToken cache.",
              "default": "{CACHE_DIR}/tiktoken",
              "format": "password"
            },
            "TIKTOKEN_ENCODING_NAME": {
              "type": "string",
              "description": "Sets the encoding name for TikToken.",
              "default": "cl100k_base",
              "format": "password"
            },
            "CHUNK_SIZE": {
              "type": "integer",
              "description": "Sets the document chunk size for embeddings.",
              "default": 1000
            },
            "CHUNK_OVERLAP": {
              "type": "integer",
              "description": "Specifies how much overlap there should be between chunks.",
              "default": 100
            },
            "PDF_EXTRACT_IMAGES": {
              "type": "boolean",
              "description": "Extracts images from PDFs using OCR when loading documents.",
              "default": false
            },
            "RAG_FILE_MAX_SIZE": {
              "type": "integer",
              "description": "Sets the maximum size of a file in megabytes that can be uploaded for document ingestion.",
              "default": "False"
            },
            "RAG_FILE_MAX_COUNT": {
              "type": "integer",
              "description": "Sets the maximum number of files that can be uploaded at once for document ingestion.",
              "default": "False"
            },
            "RAG_ALLOWED_FILE_EXTENSIONS": {
              "type": "array",
              "description": "Specifies which file extensions are permitted for upload.",
              "default": []
            },
            "RAG_RERANKING_MODEL": {
              "type": "string",
              "description": "Sets a model for reranking results. Locally, a Sentence-Transformer model is used."
            },
            "RAG_OPENAI_API_BASE_URL": {
              "type": "string",
              "description": "Sets the OpenAI base API URL to use for RAG embeddings.",
              "default": "${OPENAI_API_BASE_URL}"
            },
            "RAG_OPENAI_API_KEY": {
              "type": "string",
              "description": "Sets the OpenAI API key to use for RAG embeddings.",
              "default": "${OPENAI_API_KEY}",
              "format": "password"
            },
            "RAG_EMBEDDING_OPENAI_BATCH_SIZE": {
              "type": "integer",
              "description": "Sets the batch size for OpenAI embeddings.",
              "default": 1
            },
            "RAG_EMBEDDING_BATCH_SIZE": {
              "type": "integer",
              "description": "Sets the batch size for embedding in RAG (Retrieval-Augmented Generator) models.",
              "default": 1
            },
            "RAG_OLLAMA_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Ollama API used in RAG models.",
              "format": "password"
            },
            "RAG_OLLAMA_BASE_URL": {
              "type": "string",
              "description": "Sets the base URL for Ollama API used in RAG models."
            },
            "ENABLE_RETRIEVAL_QUERY_GENERATION": {
              "type": "boolean",
              "description": "Enables or disables retrieval query generation.",
              "default": true
            },
            "QUERY_GENERATION_PROMPT_TEMPLATE": {
              "type": "string",
              "description": "Sets the prompt template for query generation."
            },
            "BYPASS_EMBEDDING_AND_RETRIEVAL": {
              "type": "boolean",
              "description": "Bypasses the embedding and retrieval process.",
              "default": false
            },
            "DOCUMENT_INTELLIGENCE_ENDPOINT": {
              "type": "string",
              "description": "Specifies the endpoint for document intelligence."
            },
            "DOCUMENT_INTELLIGENCE_KEY": {
              "type": "string",
              "description": "Specifies the key for document intelligence.",
              "format": "password"
            },
            "ENABLE_RAG_LOCAL_WEB_FETCH": {
              "type": "boolean",
              "description": "Enables or disables local web fetch for RAG.",
              "default": false
            },
            "RAG_EMBEDDING_CONTENT_PREFIX": {
              "type": "string",
              "description": "Specifies the prefix for the RAG embedding content."
            },
            "RAG_EMBEDDING_PREFIX_FIELD_NAME": {
              "type": "string",
              "description": "Specifies the field name for the RAG embedding prefix."
            },
            "RAG_EMBEDDING_QUERY_PREFIX": {
              "type": "string",
              "description": "Specifies the prefix for the RAG embedding query."
            },
            "RAG_FULL_CONTEXT": {
              "type": "boolean",
              "description": "Specifies whether to use the full context for RAG.",
              "default": false
            }
          }
        },
        "augmented_generation_(rag)_google_drive": {
          "type": "object",
          "title": "Augmented Generation (rag) Google Drive",
          "properties": {
            "ENABLE_GOOGLE_DRIVE_INTEGRATION": {
              "type": "boolean",
              "description": "Enables or disables Google Drive integration. If set to true, and `GOOGLE_DRIVE_CLIENT_ID` & `GOOGLE_DRIVE_API_KEY` are both configured, Google Drive will appear as an upload option in the chat UI.",
              "default": false
            },
            "GOOGLE_DRIVE_CLIENT_ID": {
              "type": "string",
              "description": "Sets the client ID for Google Drive (client must be configured with Drive API and Picker API enabled)."
            },
            "GOOGLE_DRIVE_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Google Drive integration.",
              "format": "password"
            }
          }
        },
        "augmented_generation_(rag)_onedrive": {
          "type": "object",
          "title": "Augmented Generation (rag) Onedrive",
          "properties": {
            "ENABLE_ONEDRIVE_INTEGRATION": {
              "type": "boolean",
              "description": "Enables or disables OneDrive integration.",
              "default": false
            },
            "ONEDRIVE_CLIENT_ID": {
              "type": "string",
              "description": "Specifies the client ID for OneDrive integration."
            }
          }
        }
      }
    },
    "web": {
      "type": "object",
      "title": "Web",
      "properties": {
        "search": {
          "type": "object",
          "title": "Search",
          "properties": {
            "ENABLE_WEB_SEARCH": {
              "type": "boolean",
              "description": "Enable web search toggle.",
              "default": false
            },
            "ENABLE_SEARCH_QUERY_GENERATION": {
              "type": "boolean",
              "description": "Enables or disables search query generation.",
              "default": true
            },
            "WEB_SEARCH_TRUST_ENV": {
              "type": "boolean",
              "description": "Enables proxy set by `http_proxy` and `https_proxy` during web search content fetching.",
              "default": false
            },
            "WEB_SEARCH_RESULT_COUNT": {
              "type": "integer",
              "description": "Maximum number of search results to crawl.",
              "default": 3
            },
            "WEB_SEARCH_CONCURRENT_REQUESTS": {
              "type": "integer",
              "description": "Number of concurrent requests to crawl web pages returned from search results.",
              "default": 10
            },
            "WEB_SEARCH_ENGINE": {
              "type": "string",
              "description": "",
              "enum": [
                "searxng",
                "google_pse",
                "brave",
                "kagi",
                "mojeek",
                "bocha",
                "serpstack",
                "serper",
                "serply",
                "searchapi",
                "serpapi",
                "duckduckgo",
                "tavily",
                "jina",
                "bing",
                "exa",
                "perplexity",
                "sougou"
              ]
            },
            "BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL": {
              "type": "boolean",
              "description": "Bypasses the web search embedding and retrieval process.",
              "default": false
            },
            "SEARXNG_QUERY_URL": {
              "type": "string",
              "description": "The [SearXNG search API](https://docs.searxng.org/dev/search_api.html) URL supporting JSON output. `<query>` is replaced with"
            },
            "GOOGLE_PSE_API_KEY": {
              "type": "string",
              "description": "Sets the API key for the Google Programmable Search Engine (PSE) service.",
              "format": "password"
            },
            "GOOGLE_PSE_ENGINE_ID": {
              "type": "string",
              "description": "The engine ID for the Google Programmable Search Engine (PSE) service."
            },
            "BRAVE_SEARCH_API_KEY": {
              "type": "string",
              "description": "Sets the API key for the Brave Search API.",
              "format": "password"
            },
            "KAGI_SEARCH_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Kagi Search API.",
              "format": "password"
            },
            "MOJEEK_SEARCH_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Mojeek Search API.",
              "format": "password"
            },
            "SERPSTACK_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Serpstack search API.",
              "format": "password"
            },
            "SERPSTACK_HTTPS": {
              "type": "boolean",
              "description": "Configures the use of HTTPS for Serpstack requests. Free tier requests are restricted to HTTP only.",
              "default": true
            },
            "SERPER_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Serper search API.",
              "format": "password"
            },
            "SERPLY_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Serply search API.",
              "format": "password"
            },
            "SEARCHAPI_API_KEY": {
              "type": "string",
              "description": "Sets the API key for SearchAPI.",
              "format": "password"
            },
            "SEARCHAPI_ENGINE": {
              "type": "string",
              "description": "Sets the SearchAPI engine."
            },
            "TAVILY_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Tavily search API.",
              "format": "password"
            },
            "JINA_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Jina.",
              "format": "password"
            },
            "BING_SEARCH_V7_ENDPOINT": {
              "type": "string",
              "description": "Sets the endpoint for Bing Search API."
            },
            "BING_SEARCH_V7_SUBSCRIPTION_KEY": {
              "type": "string",
              "description": "Sets the subscription key for Bing Search API.",
              "default": "https://api.bing.microsoft.com/v7.0/search",
              "format": "password"
            },
            "BOCHA_SEARCH_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Bocha Search API.",
              "format": "password"
            },
            "EXA_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Exa search API.",
              "format": "password"
            },
            "SERPAPI_API_KEY": {
              "type": "string",
              "description": "Sets the API key for SerpAPI.",
              "format": "password"
            },
            "SERPAPI_ENGINE": {
              "type": "string",
              "description": "Specifies the search engine to use for SerpAPI."
            },
            "SOUGOU_API_SID": {
              "type": "string",
              "description": "Sets the Sogou API SID."
            },
            "SOUGOU_API_SK": {
              "type": "string",
              "description": "Sets the Sogou API SK."
            },
            "TAVILY_EXTRACT_DEPTH": {
              "type": "string",
              "description": "Specifies the extract depth for Tavily search results.",
              "default": "basic"
            }
          }
        },
        "search_web_loader_configuration": {
          "type": "object",
          "title": "Search Web Loader Configuration",
          "properties": {
            "WEB_LOADER_ENGINE": {
              "type": "string",
              "description": "Specifies the loader to use for retrieving and processing web content.\n\nOptions:\n  - `requests` - Uses the Requests module with enhanced error handling.\n  - `playwright` - Uses Playwright for more advanced web page rendering and interaction.\n",
              "default": "safe_web",
              "enum": [
                "requests",
                "playwright"
              ]
            },
            "PLAYWRIGHT_WS_URL": {
              "type": "string",
              "description": "Specifies the WebSocket URI of a remote Playwright browser instance. When set, Open WebUI will use this remote browser instead of installing browser dependencies locally. This is particularly useful in containerized environments where you want to keep the Open WebUI container lightweight and separate browser concerns. Example: `ws://playwright:3000`"
            },
            "FIRECRAWL_API_BASE_URL": {
              "type": "string",
              "description": "Sets the base URL for Firecrawl API.",
              "default": "https://api.firecrawl.dev"
            },
            "FIRECRAWL_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Firecrawl API.",
              "format": "password"
            },
            "PERPLEXITY_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Perplexity API.",
              "format": "password"
            },
            "PLAYWRIGHT_TIMEOUT": {
              "type": "integer",
              "description": "Specifies the timeout for Playwright requests.",
              "default": "Empty string (' '), since"
            }
          }
        },
        "search_youtube_loader": {
          "type": "object",
          "title": "Search Youtube Loader",
          "properties": {
            "YOUTUBE_LOADER_PROXY_URL": {
              "type": "string",
              "description": "Sets the proxy URL for YouTube loader."
            },
            "YOUTUBE_LOADER_LANGUAGE": {
              "type": "string",
              "description": "Comma-separated list of language codes to try when fetching YouTube video transcriptions, in priority order.",
              "default": "en"
            }
          }
        }
      }
    },
    "audio": {
      "type": "object",
      "title": "Audio",
      "properties": {
        "whisper_speech_to_text_(local)": {
          "type": "object",
          "title": "Whisper Speech To Text (local)",
          "properties": {
            "WHISPER_MODEL": {
              "type": "string",
              "description": "Sets the Whisper model to use for Speech-to-Text. The backend used is faster_whisper with quantization to `int8`.",
              "default": "base"
            },
            "WHISPER_MODEL_DIR": {
              "type": "string",
              "description": "Specifies the directory to store Whisper model files.",
              "default": "${DATA_DIR}/cache/whisper/models"
            },
            "WHISPER_VAD_FILTER": {
              "type": "boolean",
              "description": "Specifies whether to apply a Voice Activity Detection (VAD) filter to Whisper Speech-to-Text.",
              "default": false
            },
            "WHISPER_MODEL_AUTO_UPDATE": {
              "type": "boolean",
              "description": "Toggles automatic update of the Whisper model.",
              "default": false
            },
            "WHISPER_LANGUAGE": {
              "type": "string",
              "description": "Specifies the ISO 639-1 language Whisper uses for STT (ISO 639-2 for Hawaiian and Cantonese). Whisper predicts the language by default."
            }
          }
        },
        "speech_to_text_(openai)": {
          "type": "object",
          "title": "Speech To Text (openai)",
          "properties": {
            "AUDIO_STT_ENGINE": {
              "type": "string",
              "description": "Specifies the Speech-to-Text engine to use.\n\nOptions:\n  - `openai` - Uses OpenAI engine for Speech-to-Text.\n  - `deepgram` - Uses Deepgram engine for Speech-to-Text.\n",
              "enum": [
                "openai",
                "deepgram"
              ]
            },
            "AUDIO_STT_MODEL": {
              "type": "string",
              "description": "Specifies the Speech-to-Text model to use for OpenAI-compatible endpoints.",
              "default": "whisper-1"
            },
            "AUDIO_STT_OPENAI_API_BASE_URL": {
              "type": "string",
              "description": "Sets the OpenAI-compatible base URL to use for Speech-to-Text.",
              "default": "${OPENAI_API_BASE_URL}"
            },
            "AUDIO_STT_OPENAI_API_KEY": {
              "type": "string",
              "description": "Sets the OpenAI API key to use for Speech-to-Text.",
              "default": "${OPENAI_API_KEY}",
              "format": "password"
            }
          }
        },
        "speech_to_text_(azure)": {
          "type": "object",
          "title": "Speech To Text (azure)",
          "properties": {
            "AUDIO_STT_AZURE_API_KEY": {
              "type": "string",
              "description": "Specifies the Azure API key to use for Speech-to-Text.",
              "format": "password"
            },
            "AUDIO_STT_AZURE_REGION": {
              "type": "string",
              "description": "Specifies the Azure region to use for Speech-to-Text."
            },
            "AUDIO_STT_AZURE_LOCALES": {
              "type": "string",
              "description": "Specifies the locales to use for Azure Speech-to-Text."
            }
          }
        },
        "speech_to_text_(deepgram)": {
          "type": "object",
          "title": "Speech To Text (deepgram)",
          "properties": {
            "DEEPGRAM_API_KEY": {
              "type": "string",
              "description": "Specifies the Deepgram API key to use for Speech-to-Text.",
              "format": "password"
            }
          }
        },
        "text_to_speech": {
          "type": "object",
          "title": "Text To Speech",
          "properties": {
            "AUDIO_TTS_API_KEY": {
              "type": "string",
              "description": "Sets the API key for Text-to-Speech.",
              "format": "password"
            },
            "AUDIO_TTS_ENGINE": {
              "type": "string",
              "description": "Specifies the Text-to-Speech engine to use.\n\nOptions:\n  - `azure` - Uses Azure engine for Text-to-Speech.\n  - `elevenlabs` - Uses ElevenLabs engine for Text-to-Speech\n  - `openai` - Uses OpenAI engine for Text-to-Speech.\n  - `transformers` - Uses SentenceTransformers for Text-to-Speech.\n",
              "enum": [
                "azure",
                "elevenlabs",
                "openai",
                "transformers"
              ]
            },
            "AUDIO_TTS_MODEL": {
              "type": "string",
              "description": "Specifies the OpenAI text-to-speech model to use.",
              "default": "tts-1"
            },
            "AUDIO_TTS_VOICE": {
              "type": "string",
              "description": "Sets the OpenAI text-to-speech voice to use.",
              "default": "alloy"
            },
            "AUDIO_TTS_SPLIT_ON": {
              "type": "string",
              "description": "Sets the OpenAI text-to-speech split on to use.",
              "default": "punctuation"
            }
          }
        },
        "azure_text_to_speech": {
          "type": "object",
          "title": "Azure Text To Speech",
          "properties": {
            "AUDIO_TTS_AZURE_SPEECH_REGION": {
              "type": "string",
              "description": "Sets the region for Azure Text to Speech."
            },
            "AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT": {
              "type": "string",
              "description": "Sets the output format for Azure Text to Speech."
            }
          }
        },
        "openai_text_to_speech": {
          "type": "object",
          "title": "Openai Text To Speech",
          "properties": {
            "AUDIO_TTS_OPENAI_API_BASE_URL": {
              "type": "string",
              "description": "Sets the OpenAI-compatible base URL to use for text-to-speech.",
              "default": "${OPENAI_API_BASE_URL}"
            },
            "AUDIO_TTS_OPENAI_API_KEY": {
              "type": "string",
              "description": "Sets the API key to use for text-to-speech.",
              "default": "${OPENAI_API_KEY}",
              "format": "password"
            }
          }
        }
      }
    },
    "image": {
      "type": "object",
      "title": "Image",
      "properties": {
        "generation": {
          "type": "object",
          "title": "Generation",
          "properties": {
            "IMAGE_GENERATION_ENGINE": {
              "type": "string",
              "description": "Specifies the engine to use for image generation.\n\nOptions:\n  - `openai` - Uses OpenAI DALL-E for image generation.\n  - `comfyui` - Uses ComfyUI engine for image generation.\n  - `automatic1111` - Uses AUTOMATIC1111 engine for image generation.\n  - `gemini` - Uses Gemini for image generation.\n",
              "default": "openai",
              "enum": [
                "openai",
                "comfyui",
                "automatic1111",
                "gemini"
              ]
            },
            "ENABLE_IMAGE_GENERATION": {
              "type": "boolean",
              "description": "Enables or disables image generation features.",
              "default": false
            },
            "ENABLE_IMAGE_PROMPT_GENERATION": {
              "type": "boolean",
              "description": "Enables or disables image prompt generation.",
              "default": true
            },
            "IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE": {
              "type": "string",
              "description": "Specifies the template to use for generating image prompts."
            },
            "IMAGE_SIZE": {
              "type": "string",
              "description": "Sets the default image size to generate.",
              "default": "512x512"
            },
            "IMAGE_STEPS": {
              "type": "integer",
              "description": "Sets the default iteration steps for image generation. Used for ComfyUI and AUTOMATIC1111.",
              "default": 50
            },
            "IMAGE_GENERATION_MODEL": {
              "type": "string",
              "description": "Default model to use for image generation"
            }
          }
        },
        "generation_automatic1111": {
          "type": "object",
          "title": "Generation Automatic1111",
          "properties": {
            "AUTOMATIC1111_BASE_URL": {
              "type": "string",
              "description": "Specifies the URL to AUTOMATIC1111's Stable Diffusion API."
            },
            "AUTOMATIC1111_API_AUTH": {
              "type": "string",
              "description": "Sets the AUTOMATIC1111 API authentication."
            },
            "AUTOMATIC1111_CFG_SCALE": {
              "type": "number",
              "description": "Sets the scale for AUTOMATIC1111 inference."
            },
            "AUTOMATIC1111_SAMPLER": {
              "type": "string",
              "description": "Sets the sampler for AUTOMATIC1111 inference."
            },
            "AUTOMATIC1111_SCHEDULER": {
              "type": "string",
              "description": "Sets the scheduler for AUTOMATIC1111 inference."
            }
          }
        },
        "generation_comfyui": {
          "type": "object",
          "title": "Generation Comfyui",
          "properties": {
            "COMFYUI_BASE_URL": {
              "type": "string",
              "description": "Specifies the URL to the ComfyUI image generation API."
            },
            "COMFYUI_API_KEY": {
              "type": "string",
              "description": "Sets the API key for ComfyUI.",
              "format": "password"
            },
            "COMFYUI_WORKFLOW": {
              "type": "string",
              "description": "Sets the ComfyUI workflow."
            }
          }
        },
        "generation_gemini": {
          "type": "object",
          "title": "Generation Gemini",
          "properties": {
            "GEMINI_API_BASE_URL": {
              "type": "string",
              "description": "Specifies the URL to Gemini's API."
            },
            "GEMINI_API_KEY": {
              "type": "string",
              "description": "Sets the Gemini API key.",
              "format": "password"
            },
            "IMAGES_GEMINI_API_BASE_URL": {
              "type": "string",
              "description": "Specifies the URL to Gemini's image generation API."
            },
            "IMAGES_GEMINI_API_KEY": {
              "type": "string",
              "description": "Sets the Gemini API key for image generation.",
              "format": "password"
            }
          }
        },
        "generation_openai_dall_e": {
          "type": "object",
          "title": "Generation Openai Dall E",
          "properties": {
            "IMAGES_OPENAI_API_BASE_URL": {
              "type": "string",
              "description": "Sets the OpenAI-compatible base URL to use for DALL-E image generation.",
              "default": "${OPENAI_API_BASE_URL}"
            },
            "IMAGES_OPENAI_API_KEY": {
              "type": "string",
              "description": "Sets the API key to use for DALL-E image generation.",
              "default": "${OPENAI_API_KEY}",
              "format": "password"
            }
          }
        }
      }
    },
    "user": {
      "type": "object",
      "title": "User",
      "properties": {
        "permissions_chat_permissions": {
          "type": "object",
          "title": "Permissions Chat Permissions",
          "properties": {
            "USER_PERMISSIONS_CHAT_CONTROLS": {
              "type": "boolean",
              "description": "Enables or disables user permission to access chat controls.",
              "default": true
            },
            "USER_PERMISSIONS_CHAT_FILE_UPLOAD": {
              "type": "boolean",
              "description": "Enables or disables user permission to upload files to chats.",
              "default": true
            },
            "USER_PERMISSIONS_CHAT_DELETE": {
              "type": "boolean",
              "description": "Enables or disables user permission to delete chats.",
              "default": true
            },
            "USER_PERMISSIONS_CHAT_EDIT": {
              "type": "boolean",
              "description": "Enables or disables user permission to edit chats.",
              "default": true
            },
            "USER_PERMISSIONS_CHAT_STT": {
              "type": "boolean",
              "description": "Enables or disables user permission to use Speech-to-Text in chats.",
              "default": true
            },
            "USER_PERMISSIONS_CHAT_TTS": {
              "type": "boolean",
              "description": "Enables or disables user permission to use Text-to-Speech in chats.",
              "default": true
            },
            "USER_PERMISSIONS_CHAT_CALL": {
              "type": "string",
              "description": "Enables or disables user permission to make calls in chats.",
              "default": "True"
            },
            "USER_PERMISSIONS_CHAT_MULTIPLE_MODELS": {
              "type": "string",
              "description": "Enables or disables user permission to use multiple models in chats.",
              "default": "True"
            },
            "USER_PERMISSIONS_CHAT_TEMPORARY": {
              "type": "boolean",
              "description": "Enables or disables user permission to create temporary chats.",
              "default": true
            },
            "USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED": {
              "type": "string",
              "description": "Enables or disables enforced temporary chats for users.",
              "default": "False"
            }
          }
        },
        "permissions_feature_permissions": {
          "type": "object",
          "title": "Permissions Feature Permissions",
          "properties": {
            "USER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS": {
              "type": "string",
              "description": "Enables or disables user permission to access direct tool servers.",
              "default": "False"
            },
            "USER_PERMISSIONS_FEATURES_WEB_SEARCH": {
              "type": "string",
              "description": "Enables or disables user permission to use the web search feature.",
              "default": "True"
            },
            "USER_PERMISSIONS_FEATURES_IMAGE_GENERATION": {
              "type": "string",
              "description": "Enables or disables user permission to use the image generation feature.",
              "default": "True"
            },
            "USER_PERMISSIONS_FEATURES_CODE_INTERPRETER": {
              "type": "string",
              "description": "Enables or disables user permission to use code interpreter feature.",
              "default": "True"
            }
          }
        },
        "permissions_workspace_permissions": {
          "type": "object",
          "title": "Permissions Workspace Permissions",
          "properties": {
            "USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS": {
              "type": "boolean",
              "description": "Enables or disables user permission to access workspace models.",
              "default": false
            },
            "USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS": {
              "type": "boolean",
              "description": "Enables or disables user permission to access workspace knowledge.",
              "default": false
            },
            "USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS": {
              "type": "boolean",
              "description": "Enables or disables user permission to access workspace prompts.",
              "default": false
            },
            "USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS": {
              "type": "boolean",
              "description": "Enables or disables user permission to access workspace tools.",
              "default": false
            },
            "USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING": {
              "type": "string",
              "description": "Enables or disables public sharing of workspace models.",
              "default": "False"
            },
            "USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING": {
              "type": "string",
              "description": "Enables or disables public sharing of workspace knowledge.",
              "default": "False"
            },
            "USER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING": {
              "type": "string",
              "description": "Enables or disables public sharing of workspace prompts.",
              "default": "False"
            },
            "USER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING": {
              "type": "string",
              "description": "Enables or disables public sharing of workspace tools.",
              "default": "False"
            }
          }
        }
      }
    },
    "misc": {
      "type": "object",
      "title": "Misc",
      "properties": {
        "environment_variables_cloud_storage": {
          "type": "object",
          "title": "Environment Variables Cloud Storage",
          "properties": {
            "STORAGE_PROVIDER": {
              "type": "string",
              "description": "Sets the storage provider.\n\nOptions:\n  - `s3` - uses the S3 client library and related environment variables mentioned in [Amazon S3 Storage](#amazon-s3-storage)\n  - `gcs` - uses the GCS client library and related environment variables mentioned in [Google Cloud Storage](#google-cloud-storage)\n  - `azure` - uses the Azure client library and related environment variables mentioned in [Microsoft Azure Storage](#microsoft-azure-storage)\n",
              "default": "empty string (' '), which defaults to",
              "enum": [
                "s3",
                "gcs",
                "azure"
              ]
            },
            "S3_ACCESS_KEY_ID": {
              "type": "string",
              "description": "Sets the access key ID for S3 storage.",
              "format": "password"
            },
            "S3_ADDRESSING_STYLE": {
              "type": "string",
              "description": "Specifies the addressing style to use for S3 storage (e.g., 'path', 'virtual')."
            },
            "S3_BUCKET_NAME": {
              "type": "string",
              "description": "Sets the bucket name for S3 storage."
            },
            "S3_ENDPOINT_URL": {
              "type": "string",
              "description": "Sets the endpoint URL for S3 storage."
            },
            "S3_KEY_PREFIX": {
              "type": "string",
              "description": "Sets the key prefix for a S3 object.",
              "format": "password"
            },
            "S3_REGION_NAME": {
              "type": "string",
              "description": "Sets the region name for S3 storage."
            },
            "S3_SECRET_ACCESS_KEY": {
              "type": "string",
              "description": "Sets the secret access key for S3 storage.",
              "format": "password"
            },
            "S3_USE_ACCELERATE_ENDPOINT": {
              "type": "string",
              "description": "Specifies whether to use the accelerated endpoint for S3 storage.",
              "default": "False"
            },
            "GOOGLE_APPLICATION_CREDENTIALS_JSON": {
              "type": "string",
              "description": "Contents of Google Application Credentials JSON file.",
              "format": "password"
            },
            "GCS_BUCKET_NAME": {
              "type": "string",
              "description": "Sets the bucket name for Google Cloud Storage. Bucket must already exist."
            },
            "AZURE_STORAGE_ENDPOINT": {
              "type": "string",
              "description": "Sets the endpoint URL for Azure Storage."
            },
            "AZURE_STORAGE_CONTAINER_NAME": {
              "type": "string",
              "description": "Sets the container name for Azure Storage."
            },
            "AZURE_STORAGE_KEY": {
              "type": "string",
              "description": "Set the access key for Azure Storage.",
              "format": "password"
            }
          }
        },
        "environment_variables_database_pool": {
          "type": "object",
          "title": "Environment Variables Database Pool",
          "properties": {
            "DATABASE_URL": {
              "type": "string",
              "description": "Specifies the database URL to connect to.",
              "default": "sqlite:///${DATA_DIR}/webui.db"
            },
            "DATABASE_SCHEMA": {
              "type": "string",
              "description": "Specifies the database schema to connect to."
            },
            "DATABASE_POOL_SIZE": {
              "type": "integer",
              "description": "Specifies the size of the database pool. A value of `0` disables pooling.",
              "default": 0
            },
            "DATABASE_POOL_MAX_OVERFLOW": {
              "type": "integer",
              "description": "Specifies the database pool max overflow.",
              "default": 0
            },
            "DATABASE_POOL_TIMEOUT": {
              "type": "integer",
              "description": "Specifies the database pool timeout in seconds to get a connection.",
              "default": 30
            },
            "DATABASE_POOL_RECYCLE": {
              "type": "integer",
              "description": "Specifies the database pool recycle time in seconds.",
              "default": 3600
            }
          }
        },
        "environment_variables_redis": {
          "type": "object",
          "title": "Environment Variables Redis",
          "properties": {
            "REDIS_URL": {
              "type": "string",
              "description": "Specifies the URL of the Redis instance for the app-state."
            },
            "REDIS_SENTINEL_HOSTS": {
              "type": "string",
              "description": "Comma-separated list of Redis Sentinels for app state. If specified, the \"hostname\" in `REDIS_URL` will be interpreted as the Sentinel service name."
            },
            "REDIS_SENTINEL_PORT": {
              "type": "integer",
              "description": "Sentinel port for app state Redis.",
              "default": 26379
            },
            "ENABLE_WEBSOCKET_SUPPORT": {
              "type": "boolean",
              "description": "Enables websocket support in Open WebUI.",
              "default": true
            },
            "WEBSOCKET_MANAGER": {
              "type": "string",
              "description": "Specifies the websocket manager to use (in this case, Redis).",
              "default": "redis"
            },
            "WEBSOCKET_REDIS_URL": {
              "type": "string",
              "description": "Specifies the URL of the Redis instance for websocket communication. It is distinct from `REDIS_URL` and in practice, it is recommended to set both.",
              "default": "${REDIS_URL}"
            },
            "WEBSOCKET_SENTINEL_HOSTS": {
              "type": "string",
              "description": "Comma-separated list of Redis Sentinels for websocket. If specified, the \"hostname\" in `WEBSOCKET_REDIS_URL` will be interpreted as the Sentinel service name."
            },
            "WEBSOCKET_SENTINEL_PORT": {
              "type": "integer",
              "description": "Sentinel port for websocket Redis.",
              "default": 26379
            }
          }
        }
      }
    }
  },
  "dependencies": {
    "ENABLE_USER_WEBHOOKS": {
      "if": {
        "properties": {
          "ENABLE_USER_WEBHOOKS": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "WEBHOOK_URL"
        ]
      }
    },
    "SHOW_ADMIN_DETAILS": {
      "if": {
        "properties": {
          "SHOW_ADMIN_DETAILS": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "ADMIN_EMAIL"
        ]
      }
    },
    "ENABLE_OLLAMA_API": {
      "if": {
        "properties": {
          "ENABLE_OLLAMA_API": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "OLLAMA_BASE_URLS"
        ]
      }
    },
    "ENABLE_OPENAI_API": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_OPENAI_API": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OPENAI_API_BASE_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OPENAI_API": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OPENAI_API_BASE_URLS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OPENAI_API": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OPENAI_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OPENAI_API": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OPENAI_API_KEYS"
            ]
          }
        }
      ]
    },
    "ENABLE_TITLE_GENERATION": {
      "if": {
        "properties": {
          "ENABLE_TITLE_GENERATION": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "TITLE_GENERATION_PROMPT_TEMPLATE"
        ]
      }
    },
    "ENABLE_CODE_EXECUTION": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_CODE_EXECUTION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_EXECUTION_ENGINE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_EXECUTION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_EXECUTION_JUPYTER_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_EXECUTION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_EXECUTION_JUPYTER_AUTH"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_EXECUTION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_EXECUTION_JUPYTER_AUTH_TOKEN"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_EXECUTION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_EXECUTION_JUPYTER_AUTH_PASSWORD"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_EXECUTION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_EXECUTION_JUPYTER_TIMEOUT"
            ]
          }
        }
      ]
    },
    "ENABLE_CODE_INTERPRETER": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_CODE_INTERPRETER": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_INTERPRETER_ENGINE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_INTERPRETER": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_INTERPRETER_PROMPT_TEMPLATE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_INTERPRETER": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_INTERPRETER_JUPYTER_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_INTERPRETER": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_INTERPRETER_JUPYTER_AUTH"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_INTERPRETER": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_INTERPRETER_JUPYTER_AUTH_TOKEN"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_INTERPRETER": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_CODE_INTERPRETER": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "CODE_INTERPRETER_JUPYTER_TIMEOUT"
            ]
          }
        }
      ]
    },
    "ENABLE_AUTOCOMPLETE_GENERATION": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_AUTOCOMPLETE_GENERATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_AUTOCOMPLETE_GENERATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE"
            ]
          }
        }
      ]
    },
    "ENABLE_TAGS_GENERATION": {
      "if": {
        "properties": {
          "ENABLE_TAGS_GENERATION": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "TAGS_GENERATION_PROMPT_TEMPLATE"
        ]
      }
    },
    "ENABLE_API_KEY_ENDPOINT_RESTRICTIONS": {
      "if": {
        "properties": {
          "ENABLE_API_KEY_ENDPOINT_RESTRICTIONS": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "API_KEY_ALLOWED_ENDPOINTS"
        ]
      }
    },
    "WEBUI_AUTH": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "WEBUI_AUTH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBUI_SESSION_COOKIE_SAME_SITE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEBUI_AUTH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBUI_SESSION_COOKIE_SECURE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEBUI_AUTH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBUI_AUTH_COOKIE_SAME_SITE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEBUI_AUTH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBUI_AUTH_COOKIE_SECURE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEBUI_AUTH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBUI_SECRET_KEY"
            ]
          }
        }
      ]
    },
    "RAG_EMBEDDING_MODEL_AUTO_UPDATE": {
      "if": {
        "properties": {
          "RAG_EMBEDDING_MODEL_AUTO_UPDATE": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE"
        ]
      }
    },
    "RAG_RERANKING_MODEL_AUTO_UPDATE": {
      "if": {
        "properties": {
          "RAG_RERANKING_MODEL_AUTO_UPDATE": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "RAG_RERANKING_MODEL_TRUST_REMOTE_CODE"
        ]
      }
    },
    "VECTOR_DB": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "chroma"
              }
            }
          },
          "then": {
            "required": [
              "CHROMA_TENANT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "chroma"
              }
            }
          },
          "then": {
            "required": [
              "CHROMA_DATABASE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "chroma"
              }
            }
          },
          "then": {
            "required": [
              "CHROMA_HTTP_HOST"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "chroma"
              }
            }
          },
          "then": {
            "required": [
              "CHROMA_HTTP_PORT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "chroma"
              }
            }
          },
          "then": {
            "required": [
              "CHROMA_HTTP_HEADERS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "chroma"
              }
            }
          },
          "then": {
            "required": [
              "CHROMA_HTTP_SSL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "chroma"
              }
            }
          },
          "then": {
            "required": [
              "CHROMA_CLIENT_AUTH_PROVIDER"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "chroma"
              }
            }
          },
          "then": {
            "required": [
              "CHROMA_CLIENT_AUTH_CREDENTIALS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "elasticsearch"
              }
            }
          },
          "then": {
            "required": [
              "ELASTICSEARCH_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "elasticsearch"
              }
            }
          },
          "then": {
            "required": [
              "ELASTICSEARCH_CA_CERTS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "elasticsearch"
              }
            }
          },
          "then": {
            "required": [
              "ELASTICSEARCH_CLOUD_ID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "elasticsearch"
              }
            }
          },
          "then": {
            "required": [
              "ELASTICSEARCH_INDEX_PREFIX"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "elasticsearch"
              }
            }
          },
          "then": {
            "required": [
              "ELASTICSEARCH_PASSWORD"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "elasticsearch"
              }
            }
          },
          "then": {
            "required": [
              "ELASTICSEARCH_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "elasticsearch"
              }
            }
          },
          "then": {
            "required": [
              "ELASTICSEARCH_USERNAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "milvus"
              }
            }
          },
          "then": {
            "required": [
              "MILVUS_URI"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "milvus"
              }
            }
          },
          "then": {
            "required": [
              "MILVUS_DB"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "milvus"
              }
            }
          },
          "then": {
            "required": [
              "MILVUS_TOKEN"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "milvus"
              }
            }
          },
          "then": {
            "required": [
              "MILVUS_INDEX_TYPE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "milvus"
              }
            }
          },
          "then": {
            "required": [
              "MILVUS_METRIC_TYPE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "opensearch"
              }
            }
          },
          "then": {
            "required": [
              "OPENSEARCH_CERT_VERIFY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "opensearch"
              }
            }
          },
          "then": {
            "required": [
              "OPENSEARCH_PASSWORD"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "opensearch"
              }
            }
          },
          "then": {
            "required": [
              "OPENSEARCH_SSL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "opensearch"
              }
            }
          },
          "then": {
            "required": [
              "OPENSEARCH_URI"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "opensearch"
              }
            }
          },
          "then": {
            "required": [
              "OPENSEARCH_USERNAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "pgvector"
              }
            }
          },
          "then": {
            "required": [
              "PGVECTOR_DB_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "pgvector"
              }
            }
          },
          "then": {
            "required": [
              "PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "qdrant"
              }
            }
          },
          "then": {
            "required": [
              "QDRANT_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "qdrant"
              }
            }
          },
          "then": {
            "required": [
              "QDRANT_URI"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "qdrant"
              }
            }
          },
          "then": {
            "required": [
              "QDRANT_ON_DISK"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "qdrant"
              }
            }
          },
          "then": {
            "required": [
              "QDRANT_PREFER_GRPC"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "qdrant"
              }
            }
          },
          "then": {
            "required": [
              "QDRANT_GRPC_PORT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "qdrant"
              }
            }
          },
          "then": {
            "required": [
              "ENABLE_QDRANT_MULTITENANCY_MODE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "pinecone"
              }
            }
          },
          "then": {
            "required": [
              "PINECONE_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "pinecone"
              }
            }
          },
          "then": {
            "required": [
              "PINECONE_ENVIRONMENT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "pinecone"
              }
            }
          },
          "then": {
            "required": [
              "PINECONE_INDEX_NAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "pinecone"
              }
            }
          },
          "then": {
            "required": [
              "PINECONE_DIMENSION"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "pinecone"
              }
            }
          },
          "then": {
            "required": [
              "PINECONE_METRIC"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "VECTOR_DB": {
                "const": "pinecone"
              }
            }
          },
          "then": {
            "required": [
              "PINECONE_CLOUD"
            ]
          }
        }
      ]
    },
    "MILVUS_INDEX_TYPE": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "MILVUS_INDEX_TYPE": {
                "const": "HNSW"
              }
            }
          },
          "then": {
            "required": [
              "MILVUS_HNSW_M"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "MILVUS_INDEX_TYPE": {
                "const": "HNSW"
              }
            }
          },
          "then": {
            "required": [
              "MILVUS_HNSW_EFCONSTRUCTION"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "MILVUS_INDEX_TYPE": {
                "const": "IVF_FLAT"
              }
            }
          },
          "then": {
            "required": [
              "MILVUS_IVF_FLAT_NLIST"
            ]
          }
        }
      ]
    },
    "CONTENT_EXTRACTION_ENGINE": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "CONTENT_EXTRACTION_ENGINE": {
                "const": "mistral_ocr"
              }
            }
          },
          "then": {
            "required": [
              "MISTRAL_OCR_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "CONTENT_EXTRACTION_ENGINE": {
                "const": "external"
              }
            }
          },
          "then": {
            "required": [
              "EXTERNAL_DOCUMENT_LOADER_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "CONTENT_EXTRACTION_ENGINE": {
                "const": "external"
              }
            }
          },
          "then": {
            "required": [
              "EXTERNAL_DOCUMENT_LOADER_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "CONTENT_EXTRACTION_ENGINE": {
                "const": "tika"
              }
            }
          },
          "then": {
            "required": [
              "TIKA_SERVER_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "CONTENT_EXTRACTION_ENGINE": {
                "const": "docling"
              }
            }
          },
          "then": {
            "required": [
              "DOCLING_SERVER_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "CONTENT_EXTRACTION_ENGINE": {
                "const": "docling"
              }
            }
          },
          "then": {
            "required": [
              "DOCLING_OCR_ENGINE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "CONTENT_EXTRACTION_ENGINE": {
                "const": "docling"
              }
            }
          },
          "then": {
            "required": [
              "DOCLING_OCR_LANG"
            ]
          }
        }
      ]
    },
    "RAG_EMBEDDING_ENGINE": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "RAG_EMBEDDING_ENGINE": {
                "const": ""
              }
            }
          },
          "then": {
            "required": [
              "RAG_EMBEDDING_MODEL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "RAG_EMBEDDING_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "RAG_OPENAI_API_BASE_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "RAG_EMBEDDING_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "RAG_OPENAI_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "RAG_EMBEDDING_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "RAG_EMBEDDING_OPENAI_BATCH_SIZE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "RAG_EMBEDDING_ENGINE": {
                "const": "ollama"
              }
            }
          },
          "then": {
            "required": [
              "RAG_OLLAMA_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "RAG_EMBEDDING_ENGINE": {
                "const": "ollama"
              }
            }
          },
          "then": {
            "required": [
              "RAG_OLLAMA_BASE_URL"
            ]
          }
        }
      ]
    },
    "ENABLE_RAG_HYBRID_SEARCH": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_RAG_HYBRID_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "RAG_TOP_K"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_RAG_HYBRID_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "RAG_TOP_K_RERANKER"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_RAG_HYBRID_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "RAG_RELEVANCE_THRESHOLD"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_RAG_HYBRID_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "RAG_RERANKING_MODEL"
            ]
          }
        }
      ]
    },
    "RAG_TEXT_SPLITTER": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "RAG_TEXT_SPLITTER": {
                "const": "token"
              }
            }
          },
          "then": {
            "required": [
              "TIKTOKEN_CACHE_DIR"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "RAG_TEXT_SPLITTER": {
                "const": "token"
              }
            }
          },
          "then": {
            "required": [
              "TIKTOKEN_ENCODING_NAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "RAG_TEXT_SPLITTER": {
                "const": "token"
              }
            }
          },
          "then": {
            "required": [
              "CHUNK_SIZE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "RAG_TEXT_SPLITTER": {
                "const": "token"
              }
            }
          },
          "then": {
            "required": [
              "CHUNK_OVERLAP"
            ]
          }
        }
      ]
    },
    "ENABLE_RETRIEVAL_QUERY_GENERATION": {
      "if": {
        "properties": {
          "ENABLE_RETRIEVAL_QUERY_GENERATION": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "QUERY_GENERATION_PROMPT_TEMPLATE"
        ]
      }
    },
    "ENABLE_GOOGLE_DRIVE_INTEGRATION": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_GOOGLE_DRIVE_INTEGRATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GOOGLE_DRIVE_CLIENT_ID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_GOOGLE_DRIVE_INTEGRATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GOOGLE_DRIVE_API_KEY"
            ]
          }
        }
      ]
    },
    "ENABLE_ONEDRIVE_INTEGRATION": {
      "if": {
        "properties": {
          "ENABLE_ONEDRIVE_INTEGRATION": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "ONEDRIVE_CLIENT_ID"
        ]
      }
    },
    "ENABLE_WEB_SEARCH": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_WEB_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "ENABLE_SEARCH_QUERY_GENERATION"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_WEB_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEB_SEARCH_TRUST_ENV"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_WEB_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEB_SEARCH_RESULT_COUNT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_WEB_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEB_SEARCH_CONCURRENT_REQUESTS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_WEB_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEB_SEARCH_ENGINE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_WEB_SEARCH": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL"
            ]
          }
        }
      ]
    },
    "WEB_SEARCH_ENGINE": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "searxng"
              }
            }
          },
          "then": {
            "required": [
              "SEARXNG_QUERY_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "google_pse"
              }
            }
          },
          "then": {
            "required": [
              "GOOGLE_PSE_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "google_pse"
              }
            }
          },
          "then": {
            "required": [
              "GOOGLE_PSE_ENGINE_ID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "brave"
              }
            }
          },
          "then": {
            "required": [
              "BRAVE_SEARCH_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "kagi"
              }
            }
          },
          "then": {
            "required": [
              "KAGI_SEARCH_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "mojeek"
              }
            }
          },
          "then": {
            "required": [
              "MOJEEK_SEARCH_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "serpstack"
              }
            }
          },
          "then": {
            "required": [
              "SERPSTACK_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "serpstack"
              }
            }
          },
          "then": {
            "required": [
              "SERPSTACK_HTTPS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "serper"
              }
            }
          },
          "then": {
            "required": [
              "SERPER_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "serply"
              }
            }
          },
          "then": {
            "required": [
              "SERPLY_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "searchapi"
              }
            }
          },
          "then": {
            "required": [
              "SEARCHAPI_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "searchapi"
              }
            }
          },
          "then": {
            "required": [
              "SEARCHAPI_ENGINE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "tavily"
              }
            }
          },
          "then": {
            "required": [
              "TAVILY_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "jina"
              }
            }
          },
          "then": {
            "required": [
              "JINA_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "bing"
              }
            }
          },
          "then": {
            "required": [
              "BING_SEARCH_V7_ENDPOINT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "bing"
              }
            }
          },
          "then": {
            "required": [
              "BING_SEARCH_V7_SUBSCRIPTION_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "bocha"
              }
            }
          },
          "then": {
            "required": [
              "BOCHA_SEARCH_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "exa"
              }
            }
          },
          "then": {
            "required": [
              "EXA_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "serpapi"
              }
            }
          },
          "then": {
            "required": [
              "SERPAPI_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "serpapi"
              }
            }
          },
          "then": {
            "required": [
              "SERPAPI_ENGINE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "sougou"
              }
            }
          },
          "then": {
            "required": [
              "SOUGOU_API_SID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "sougou"
              }
            }
          },
          "then": {
            "required": [
              "SOUGOU_API_SK"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "tavily"
              }
            }
          },
          "then": {
            "required": [
              "TAVILY_EXTRACT_DEPTH"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_SEARCH_ENGINE": {
                "const": "perplexity"
              }
            }
          },
          "then": {
            "required": [
              "PERPLEXITY_API_KEY"
            ]
          }
        }
      ]
    },
    "WEB_LOADER_ENGINE": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "WEB_LOADER_ENGINE": {
                "const": "playwright"
              }
            }
          },
          "then": {
            "required": [
              "PLAYWRIGHT_WS_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "WEB_LOADER_ENGINE": {
                "const": "playwright"
              }
            }
          },
          "then": {
            "required": [
              "PLAYWRIGHT_TIMEOUT"
            ]
          }
        }
      ]
    },
    "AUDIO_STT_ENGINE": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": ""
              }
            }
          },
          "then": {
            "required": [
              "WHISPER_MODEL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": ""
              }
            }
          },
          "then": {
            "required": [
              "WHISPER_MODEL_DIR"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": ""
              }
            }
          },
          "then": {
            "required": [
              "WHISPER_VAD_FILTER"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": ""
              }
            }
          },
          "then": {
            "required": [
              "WHISPER_MODEL_AUTO_UPDATE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": ""
              }
            }
          },
          "then": {
            "required": [
              "WHISPER_LANGUAGE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_STT_MODEL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_STT_OPENAI_API_BASE_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_STT_OPENAI_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": "azure"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_STT_AZURE_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": "azure"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_STT_AZURE_REGION"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": "azure"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_STT_AZURE_LOCALES"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_STT_ENGINE": {
                "const": "deepgram"
              }
            }
          },
          "then": {
            "required": [
              "DEEPGRAM_API_KEY"
            ]
          }
        }
      ]
    },
    "AUDIO_TTS_ENGINE": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "AUDIO_TTS_ENGINE": {
                "const": "transformers"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_TTS_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_TTS_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_TTS_MODEL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_TTS_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_TTS_VOICE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_TTS_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_TTS_SPLIT_ON"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_TTS_ENGINE": {
                "const": "azure"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_TTS_AZURE_SPEECH_REGION"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_TTS_ENGINE": {
                "const": "azure"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_TTS_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_TTS_OPENAI_API_BASE_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "AUDIO_TTS_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "AUDIO_TTS_OPENAI_API_KEY"
            ]
          }
        }
      ]
    },
    "ENABLE_IMAGE_GENERATION": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_IMAGE_GENERATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "IMAGE_GENERATION_ENGINE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_IMAGE_GENERATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "ENABLE_IMAGE_PROMPT_GENERATION"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_IMAGE_GENERATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_IMAGE_GENERATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "IMAGE_SIZE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_IMAGE_GENERATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "IMAGE_STEPS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_IMAGE_GENERATION": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "IMAGE_GENERATION_MODEL"
            ]
          }
        }
      ]
    },
    "IMAGE_GENERATION_ENGINE": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "automatic1111"
              }
            }
          },
          "then": {
            "required": [
              "AUTOMATIC1111_BASE_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "automatic1111"
              }
            }
          },
          "then": {
            "required": [
              "AUTOMATIC1111_API_AUTH"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "automatic1111"
              }
            }
          },
          "then": {
            "required": [
              "AUTOMATIC1111_CFG_SCALE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "automatic1111"
              }
            }
          },
          "then": {
            "required": [
              "AUTOMATIC1111_SAMPLER"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "automatic1111"
              }
            }
          },
          "then": {
            "required": [
              "AUTOMATIC1111_SCHEDULER"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "comfyui"
              }
            }
          },
          "then": {
            "required": [
              "COMFYUI_BASE_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "comfyui"
              }
            }
          },
          "then": {
            "required": [
              "COMFYUI_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "comfyui"
              }
            }
          },
          "then": {
            "required": [
              "COMFYUI_WORKFLOW"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "gemini"
              }
            }
          },
          "then": {
            "required": [
              "GEMINI_API_BASE_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "gemini"
              }
            }
          },
          "then": {
            "required": [
              "GEMINI_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "gemini"
              }
            }
          },
          "then": {
            "required": [
              "IMAGES_GEMINI_API_BASE_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "gemini"
              }
            }
          },
          "then": {
            "required": [
              "IMAGES_GEMINI_API_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "IMAGES_OPENAI_API_BASE_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "IMAGE_GENERATION_ENGINE": {
                "const": "openai"
              }
            }
          },
          "then": {
            "required": [
              "IMAGES_OPENAI_API_KEY"
            ]
          }
        }
      ]
    },
    "ENABLE_OAUTH_SIGNUP": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_MERGE_ACCOUNTS_BY_EMAIL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_UPDATE_PICTURE_ON_LOGIN"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBUI_AUTH_TRUSTED_EMAIL_HEADER"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBUI_AUTH_TRUSTED_NAME_HEADER"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GOOGLE_CLIENT_ID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GOOGLE_CLIENT_SECRET"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GOOGLE_OAUTH_SCOPE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GOOGLE_REDIRECT_URI"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "MICROSOFT_CLIENT_ID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "MICROSOFT_CLIENT_SECRET"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "MICROSOFT_CLIENT_TENANT_ID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "MICROSOFT_OAUTH_SCOPE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "MICROSOFT_REDIRECT_URI"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GITHUB_CLIENT_ID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GITHUB_CLIENT_SECRET"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GITHUB_CLIENT_SCOPE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "GITHUB_CLIENT_REDIRECT_URI"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_CLIENT_ID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_CLIENT_SECRET"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OPENID_PROVIDER_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OPENID_REDIRECT_URI"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_SCOPES"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_CODE_CHALLENGE_METHOD"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_PROVIDER_NAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_USERNAME_CLAIM"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_EMAIL_CLAIM"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_SIGNUP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_PICTURE_CLAIM"
            ]
          }
        }
      ]
    },
    "ENABLE_OAUTH_GROUP_MANAGEMENT": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_GROUP_MANAGEMENT": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_GROUP_CLAIM"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_GROUP_MANAGEMENT": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_ALLOWED_DOMAINS"
            ]
          }
        }
      ]
    },
    "ENABLE_OAUTH_ROLE_MANAGEMENT": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_ROLE_MANAGEMENT": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_ROLES_CLAIM"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_ROLE_MANAGEMENT": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_ALLOWED_ROLES"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_OAUTH_ROLE_MANAGEMENT": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "OAUTH_ADMIN_ROLES"
            ]
          }
        }
      ]
    },
    "ENABLE_LDAP": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_SERVER_LABEL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_SERVER_HOST"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_SERVER_PORT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_ATTRIBUTE_FOR_MAIL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_ATTRIBUTE_FOR_USERNAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_APP_DN"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_APP_PASSWORD"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_SEARCH_BASE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_SEARCH_FILTER"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_SEARCH_FILTERS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_USE_TLS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_CA_CERT_FILE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_VALIDATE_CERT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_LDAP": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "LDAP_CIPHERS"
            ]
          }
        }
      ]
    },
    "USER_PERMISSIONS_CHAT_TEMPORARY": {
      "if": {
        "properties": {
          "USER_PERMISSIONS_CHAT_TEMPORARY": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED"
        ]
      }
    },
    "USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS": {
      "if": {
        "properties": {
          "USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS": {
            "const": false
          }
        }
      },
      "then": {
        "required": [
          "USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING"
        ]
      }
    },
    "USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS": {
      "if": {
        "properties": {
          "USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS": {
            "const": false
          }
        }
      },
      "then": {
        "required": [
          "USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING"
        ]
      }
    },
    "USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS": {
      "if": {
        "properties": {
          "USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS": {
            "const": false
          }
        }
      },
      "then": {
        "required": [
          "USER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING"
        ]
      }
    },
    "USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS": {
      "if": {
        "properties": {
          "USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS": {
            "const": false
          }
        }
      },
      "then": {
        "required": [
          "USER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING"
        ]
      }
    },
    "STORAGE_PROVIDER": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "s3"
              }
            }
          },
          "then": {
            "required": [
              "S3_ACCESS_KEY_ID"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "s3"
              }
            }
          },
          "then": {
            "required": [
              "S3_ADDRESSING_STYLE"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "s3"
              }
            }
          },
          "then": {
            "required": [
              "S3_BUCKET_NAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "s3"
              }
            }
          },
          "then": {
            "required": [
              "S3_ENDPOINT_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "s3"
              }
            }
          },
          "then": {
            "required": [
              "S3_KEY_PREFIX"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "s3"
              }
            }
          },
          "then": {
            "required": [
              "S3_REGION_NAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "s3"
              }
            }
          },
          "then": {
            "required": [
              "S3_SECRET_ACCESS_KEY"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "s3"
              }
            }
          },
          "then": {
            "required": [
              "S3_USE_ACCELERATE_ENDPOINT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "s3"
              }
            }
          },
          "then": {
            "required": [
              "S3_ENABLE_TAGGING"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "gcs"
              }
            }
          },
          "then": {
            "required": [
              "GOOGLE_APPLICATION_CREDENTIALS_JSON"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "gcs"
              }
            }
          },
          "then": {
            "required": [
              "GCS_BUCKET_NAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "azure"
              }
            }
          },
          "then": {
            "required": [
              "AZURE_STORAGE_ENDPOINT"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "azure"
              }
            }
          },
          "then": {
            "required": [
              "AZURE_STORAGE_CONTAINER_NAME"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "STORAGE_PROVIDER": {
                "const": "azure"
              }
            }
          },
          "then": {
            "required": [
              "AZURE_STORAGE_KEY"
            ]
          }
        }
      ]
    },
    "ENABLE_WEBSOCKET_SUPPORT": {
      "anyOf": [
        {
          "if": {
            "properties": {
              "ENABLE_WEBSOCKET_SUPPORT": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBSOCKET_MANAGER"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_WEBSOCKET_SUPPORT": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBSOCKET_REDIS_URL"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_WEBSOCKET_SUPPORT": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBSOCKET_SENTINEL_HOSTS"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "ENABLE_WEBSOCKET_SUPPORT": {
                "const": true
              }
            }
          },
          "then": {
            "required": [
              "WEBSOCKET_SENTINEL_PORT"
            ]
          }
        }
      ]
    }
  },
  "allOf": []
}