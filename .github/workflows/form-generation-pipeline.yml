name: Schema-Driven Code Generation

on:
  push:
    paths:
      - 'schemas/openwebui-config-schema.json'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      step:
        description: 'Which generation step to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'zod-schemas'
          - 'ui-schema'
          - 'component-mapping'

permissions:
  contents: write

jobs:
  generate-code-from-schema:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Validate OpenAPI schema
        run: |
          echo "üîç Validating OpenAPI schema..."
          
          if [ ! -f "schemas/openwebui-config-schema.json" ]; then
            echo "‚ùå OpenAPI schema file not found at schemas/openwebui-config-schema.json"
            exit 1
          fi
          
          # Check if it's valid JSON
          if ! jq empty schemas/openwebui-config-schema.json 2>/dev/null; then
            echo "‚ùå OpenAPI schema is not valid JSON"
            exit 1
          fi
          
          echo "‚úÖ OpenAPI schema validated"

      - name: Install script dependencies
        run: |
          echo "üì¶ Installing dependencies for code generation scripts..."
          
          # Install dependencies for each script directory
          for script_dir in "openapi-to-zod" "extract-uiSchema" "generate-component-mapping"; do
            if [ -d "scripts/$script_dir" ]; then
              echo "  üì¶ Installing dependencies for $script_dir..."
              cd "scripts/$script_dir"
              
              # Check if package.json exists
              if [ -f "package.json" ]; then
                npm install --quiet
                echo "  ‚úÖ Dependencies installed for $script_dir"
              else
                echo "  ‚ö†Ô∏è  No package.json found in $script_dir, skipping..."
              fi
              
              cd "../.."
            else
              echo "  ‚ö†Ô∏è  Script directory $script_dir not found, skipping..."
            fi
          done
          
          echo "‚úÖ All script dependencies installed"

      # Step 1: Generate Zod validation schemas
      - name: Generate Zod schemas from OpenAPI
        if: github.event.inputs.step == 'all' || github.event.inputs.step == 'zod-schemas' || github.event.inputs.step == ''
        run: |
          echo "üèóÔ∏è  Step 1: Generating Zod validation schemas..."
          
          if [ -d "scripts/openapi-to-zod" ]; then
            cd scripts/openapi-to-zod
            
            # Run the Zod generation script
            if node index.js; then
              echo "‚úÖ Zod schema generation completed"
              
              # Check if output was created
              if [ -f "../../src/schemas/generated-schemas.ts" ]; then
                echo "‚úÖ Generated schemas written to src/schemas/"
              else
                echo "‚ö†Ô∏è  Generated schemas file not found at expected location"
              fi
            else
              echo "‚ùå Zod schema generation failed"
              exit 1
            fi
            
            cd ../..
          else
            echo "‚ö†Ô∏è  Zod generation script not found, skipping..."
          fi

      # Step 2: Extract UI metadata
      - name: Extract uiSchema metadata
        if: github.event.inputs.step == 'all' || github.event.inputs.step == 'ui-schema' || github.event.inputs.step == ''
        run: |
          echo "üé® Step 2: Extracting uiSchema organization metadata..."
          
          if [ -d "scripts/extract-uiSchema" ]; then
            cd scripts/extract-uiSchema
            
            # Run the uiSchema extraction script
            if node index.js; then
              echo "‚úÖ uiSchema extraction completed"
              
              # Check if output was created
              if [ -f "../../src/schemas/generated-ui-schema.ts" ]; then
                echo "‚úÖ UI schema written to src/schemas/"
              else
                echo "‚ö†Ô∏è  UI schema file not found at expected location"
              fi
            else
              echo "‚ùå uiSchema extraction failed"
              exit 1
            fi
            
            cd ../..
          else
            echo "‚ö†Ô∏è  uiSchema extraction script not found, skipping..."
          fi

      # Step 3: Generate component mappings
      - name: Generate component mappings
        if: github.event.inputs.step == 'all' || github.event.inputs.step == 'component-mapping' || github.event.inputs.step == ''
        run: |
          echo "üéØ Step 3: Generating component mappings..."
          
          if [ -d "scripts/generate-component-mapping" ]; then
            cd scripts/generate-component-mapping
            
            # Run the component mapping generation script
            if node index.js; then
              echo "‚úÖ Component mapping generation completed"
              
              # Check if output was created
              if [ -f "../../src/schemas/generated-component-mappings.ts" ]; then
                echo "‚úÖ Component mappings written to src/schemas/"
              else
                echo "‚ö†Ô∏è  Component mappings file not found at expected location"
              fi
            else
              echo "‚ùå Component mapping generation failed"
              exit 1
            fi
            
            cd ../..
          else
            echo "‚ö†Ô∏è  Component mapping script not found, skipping..."
          fi

      # Verify all generated files
      - name: Verify generated files
        run: |
          echo "üîç Verifying all generated files..."
          
          generated_files=(
            "src/schemas/generated-schemas.ts"
            "src/schemas/generated-ui-schema.ts"
            "src/schemas/generated-component-mappings.ts"
            "src/schemas/index.ts"
          )
          
          for file in "${generated_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Found: $file"
              # Show file size for verification
              ls -lh "$file" | awk '{print "   Size: " $5}'
            else
              echo "‚ö†Ô∏è  Missing: $file"
            fi
          done

      # Commit generated files
      - name: Commit generated files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: |
            chore: update generated schemas from OpenAPI
            
            - Generated Zod validation schemas ‚úÖ
            - Generated uiSchema metadata ‚úÖ
            - Generated component mappings ‚úÖ
            
            [skip ci]
          file_pattern: |
            src/schemas/generated-*.ts 
            src/schemas/index.ts
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          
      # Summary
      - name: Generation summary
        run: |
          echo ""
          echo "======================================"
          echo "üéâ Code Generation Pipeline Complete!"
          echo "======================================"
          echo ""
          echo "‚úÖ OpenAPI schema processed"
          echo "‚úÖ Zod schemas generated"
          echo "‚úÖ UI metadata extracted"
          echo "‚úÖ Component mappings created"
          echo ""
          echo "Generated files have been committed to the repository."
          echo ""
          echo "üìã Next Steps:"
          echo "1. Pull the latest changes locally"
          echo "2. Run 'npm install' to install dependencies"
          echo "3. Run 'npm run build' to build the application"
          echo "4. Deploy to Cloudflare Workers using:"
          echo "   - Cloudflare Dashboard (recommended)"
          echo "   - OR run 'npx wrangler deploy' locally"
          echo ""
          echo "üîó For Cloudflare Workers deployment:"
          echo "   1. Go to workers.cloudflare.com"
          echo "   2. Create a new Worker or use existing"
          echo "   3. Connect your GitHub repository"
          echo "   4. Configure with your custom domain (openwebui-config.com)"
